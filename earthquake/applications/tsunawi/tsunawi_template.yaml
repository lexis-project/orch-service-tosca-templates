tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.wp6.TsunawiTemplate
  template_version: 0.1.0-SNAPSHOT
  template_author: lexis

description: "Tsunawi workflow template"

imports:
  - yorc-types:1.1.0
  - yorc-openstack-types:3.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - docker-types:3.0.0
  - alien-base-types:3.0.0
  - org.lexis.common.ddi-types:1.0.2
  - org.lexis.common.heappe-types:1.0.7
  - org.lexis.common.dynamic-orchestration-types:1.0.2
  - org.ystia.docker.containers.docker.generic:3.0.0-SNAPSHOT
  - org.ystia.docker.ansible:3.0.0-SNAPSHOT
  - org.lexis.common.datatransfer:0.1.4-SNAPSHOT
  - org.lexis.common.tsunawi.shakemap:0.0.1-SNAPSHOT

topology_template:
  inputs:
    token:
      type: string
      description: "Access token"
      required: true
    project_id:
      type: string
      description: "LEXIS project identifier"
      required: true
    preprocessing_event_dataset_metadata:
      type: org.lexis.common.ddi.types.Metadata
      description: "Dataset metadata"
      required: false
      default:
        resourceType: "Earthquake event"
    preprocessing_needed_files_patterns_in_dataset:
      type: list
      entry_schema:
        type: string
      description: "List of patterns of files that need to be available in dataset"
      required: false
      default:
        - ".*.quakeml"
    preprocessing_quakeml_file_pattern:
      type: string
      description: "Pattern of the quakeml event file"
      required: false
      default: ".*.quakeml"
    preprocessing_ground_motion_prediction_equation:
      type: string
      description: "Ground motion prediction equation (example: BindiEtAl2014Rjb)"
      required: false
      default: BindiEtAl2014Rjb
    preprocessing_intensity_measure_type:
      type: string
      description: "Intensity measure type (example: PGA)"
      required: false
      default: PGA
    preprocessing_format:
      type: string
      description: "Format (grid or contour). Use grid for regular spaced data, contour for contour data in GeoJSON format."
      required: false
      default: grid
    preprocessing_image_shakemap_service:
      type: string
      description:
      required: false
      default: "laurentg/shakemapi:0.0.2"
    postprocessing_ddi_path:
      type: string
      description: Path where to transfer the post-processing results in DDI
      default: "project/proj19de37bda794a92aa6e514994bf0f930"
      required: false
    postprocessing_dataset_title_shakemap_result:
      type: string
      description: Which will be the title of the dataset containing shakemap results
      default: Shakemap tests results
      required: false
  node_templates:
    # Validation of the token provided in input
    # Exchanging this token to have an access and refresh tokens
    # for any component needing it in the workflow
    ValidateExchangeToken:
      type: org.lexis.common.dynamic.orchestration.nodes.ValidateAndExchangeToken
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }
    # Find the best cloud location depending on the needed cloud resources
    FindCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - CloudResourceVM:
            type_requirement: cloud_instance
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
    # Floating IP address network
    PublicNet:
      type: yorc.nodes.openstack.FloatingIP
    # Cloud instance used for shakemap computation
    ShakemapVM:
      type: tosca.nodes.Compute
      requirements:
        - networkPublicNetConnection:
            type_requirement: network
            node: PublicNet
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            num_cpus: 2
            disk_size: "40 GB"
        os:
          properties:
            type: linux
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    Docker:
      type: org.ystia.docker.ansible.nodes.Docker
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Shakemap service docker container
    ShakemapService:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: preprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: true
        image: {get_input: preprocessing_image_shakemap_service}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        shm_size: "1024 MB"
        volumes: []
        docker_env_vars:
          VS30PATH: /data/global_vs30.grd
        published_ports:
          - "8082:8082"
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
    # Wait for an earthquake event dataset to appear in DDI
    WaitForDDIDatasetJob:
      type: org.lexis.common.ddi.nodes.WaitForDDIDatasetJob
      properties:
        token: { get_input: token }
        metadata: { get_input: preprocessing_event_dataset_metadata }
        needed_files_patterns: { get_input: preprocessing_needed_files_patterns_in_dataset }
    # Transfer the earthwuake event dataset to the cloud staging area
    DDIToCloudTransferJob:
      type: org.lexis.common.ddi.nodes.DDIRuntimeFilesToCloudJob
      properties:
        token: { get_input: token }
        file_pattern: { get_input: preprocessing_quakeml_file_pattern }
        cloud_staging_area_directory_path: "test_lexis_ddi_to_cloud"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - dataset_files:
            type_requirement: dataset_files
            node: WaitForDDIDatasetJob
            capability: org.lexis.common.ddi.capabilities.DatasetFilesProvider
            relationship: org.lexis.common.ddi.relationships.DatasetFilesProvider
    # Get details on how to access the cloud staging area
    GetDDIAccess:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    # Mount the cloud staging area on the VM to access the dataset
    MountTransferredDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/tsunawi-event"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudTransferJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Find the quakeml file in mounted filesystem
    FindQuakemlFile:
      type: org.lexis.common.datatransfer.nodes.FindFileInStagingAreaDirectory
      properties:
        shell_patterns: ["*.quakeml"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountTransferredDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Copy the quakeml file locally
    CopyQuakemlFileFromStagingArea:
      type: org.lexis.common.datatransfer.nodes.CopyFromStagingArea
      properties:
        destination_directory:  "/shakemap"
        destination_file_name: "event.quakeml"
      requirements:
        - file_provider:
            type_requirement: file_provider
            node: FindQuakemlFile
            capability: org.lexis.common.datatransfer.capabilities.FileProvider
            relationship: org.lexis.common.datatransfer.relationships.FileProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Run the client sending a request to shakemap service
    Shakemap:
      type: org.lexis.common.tsunawi.nodes.Shakemap
      properties:
        shakemap_service_url: "http://localhost:8082/shakemap"
        gmpe: { get_input: preprocessing_ground_motion_prediction_equation }
        imt: { get_input: preprocessing_intensity_measure_type }
        format: { get_input: preprocessing_format }
        quakeml_file_path: "/shakemap/event.quakeml"
        shakemap_result_file_path: "/shakemap/shakemap_result.json"
      requirements:
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Copy shakemap results to staging area
    StageShakemapResults:
      type: org.lexis.common.datatransfer.nodes.CopyFilesToStagingAreaDirectory
      properties:
        source_directory: "/shakemap"
        source_files: [ "*result.json" ]
      requirements:
        - staging_area_directory:
            type_requirement: cloud_area_directory_provider
            node: MountTransferredDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Stage shakemap results from the cloud stagig area to DDI
    ShakemapResultsCloudToDDIJob:
      type: org.lexis.common.ddi.nodes.CloudToDDIJob
      properties:
        metadata: {concat: ["{\"creator\": [\"Shakemap workflow\"], \"contributor\": [\"Shakemap workflow\"], \"publisher\": [\"Shakemap workflow\"], \"resourceType\": \"Workflow result\", \"title\": \"", get_input: postprocessing_dataset_title_shakemap_result, "\"}"]}
        token: { get_input: token }
        ddi_path: { get_input: postprocessing_ddi_path }
        source_file_name: "shakemap_result.json"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountTransferredDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
    #Clenaup the staging area
    DeleteCloudTransferredDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudTransferJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
  outputs:
    dataset_shakemap_results:
      description: DDI path to ADMS post-processing results
      value: { get_attribute: [ ShakemapResultsCloudToDDIJob, destination_path ] }
  workflows:
    # At deployment time, validating the input token and exchanging it
    # to get an access/refresh token for the orchestrator
    install:
      steps:
        ValidateExchangeToken_start:
          target: ValidateExchangeToken
          activities:
            - call_operation: Standard.start
          on_success:
            - ValidateExchangeToken_started
        ValidateExchangeToken_started:
          target: ValidateExchangeToken
          activities:
            - set_state: started
    uninstall:
      steps:
        DeleteCloudTransferredDataJob:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudTransferredDataJobd
        DeleteCloudTransferredDataJobd:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudTransferredDataJob_submit
        DeleteCloudTransferredDataJob_submit:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
           - Compute_uninstall
        Compute_uninstall:
          target: ShakemapVM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNet
          activities:
            - delegate: uninstall
    Run:
      steps:
        FindCloudLocationJob_submit:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindCloudLocationJob_run
        FindCloudLocationJob_run:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindCloudLocationJob_executed
        FindCloudLocationJob_executed:
          target: FindCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - Network_install
        Network_install:
          target: PublicNet
          activities:
            - delegate: install
          on_success:
            - Compute_install
        Compute_install:
          target: ShakemapVM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccess_start
            - Docker_create
        Docker_create:
          target: Docker
          activities:
            - call_operation: Standard.create
          on_success:
            - Docker_configure
        Docker_configure:
          target: Docker
          activities:
            - call_operation: Standard.configure
          on_success:
            - Docker_start
        Docker_start:
          target: Docker
          activities:
            - call_operation: Standard.start
          on_success:
            - Docker_started
        Docker_started:
          target: Docker
          activities:
            - set_state: started
          on_success:
            - ShakemapService_create
        ShakemapService_create:
          target: ShakemapService
          activities:
            - call_operation: Standard.create
          on_success:
            - ShakemapService_start
        ShakemapService_start:
          target: ShakemapService
          activities:
            - call_operation: Standard.start
          on_success:
            - ShakemapService_started
        ShakemapService_started:
          target: ShakemapService
          activities:
            - set_state: started
          on_success:
            - Shakemap_start
        WaitForDDIDatasetJob_create:
          target: WaitForDDIDatasetJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - WaitForDDIDatasetJob_submit
        WaitForDDIDatasetJob_submit:
          target: WaitForDDIDatasetJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - WaitForDDIDatasetJob_submitted
        WaitForDDIDatasetJob_submitted:
          target: WaitForDDIDatasetJob
          activities:
            - set_state: submitted
          on_success:
            - WaitForDDIDatasetJob_run
        WaitForDDIDatasetJob_run:
          target: WaitForDDIDatasetJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - WaitForDDIDatasetJob_executed
        WaitForDDIDatasetJob_executed:
          target: WaitForDDIDatasetJob
          activities:
            - set_state: executed
          on_success:
            - DDIToCloudTransferJob_create
        DDIToCloudTransferJob_create:
          target: DDIToCloudTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudTransferJob_submit
        DDIToCloudTransferJob_submit:
          target: DDIToCloudTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudTransferJob_submitted
        DDIToCloudTransferJob_submitted:
          target: DDIToCloudTransferJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudTransferJob_run
        DDIToCloudTransferJob_run:
          target: DDIToCloudTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudTransferJob_executed
        DDIToCloudTransferJob_executed:
          target: DDIToCloudTransferJob
          activities:
            - set_state: executed
          on_success:
            - MountTransferredDataset_create
        GetDDIAccess_start:
          target: GetDDIAccess
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccess_started
        GetDDIAccess_started:
          target: GetDDIAccess
          activities:
            - set_state: started
          on_success:
            - MountTransferredDataset_create
        MountTransferredDataset_create:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountTransferredDataset_created
        MountTransferredDataset_created:
          target: MountTransferredDataset
          activities:
            - set_state: created
          on_success:
            - MountTransferredDataset_refresh_token
        MountTransferredDataset_refresh_token:
          target: MountTransferredDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountTransferredDataset_start
        MountTransferredDataset_start:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountTransferredDataset_started
        MountTransferredDataset_started:
          target: MountTransferredDataset
          activities:
            - set_state: started
          on_success:
            - FindQuakemlFile_start
        FindQuakemlFile_start:
          target: FindQuakemlFile
          activities:
            - call_operation: Standard.start
          on_success:
            - FindQuakemlFile_started
        FindQuakemlFile_started:
          target: FindQuakemlFile
          activities:
            - set_state: started
          on_success:
            - CopyQuakemlFileFromStagingArea_start
        CopyQuakemlFileFromStagingArea_start:
          target: CopyQuakemlFileFromStagingArea
          activities:
            - call_operation: Standard.start
          on_success:
            - CopyQuakemlFileFromStagingArea_started
        CopyQuakemlFileFromStagingArea_started:
          target: CopyQuakemlFileFromStagingArea
          activities:
            - set_state: started
          on_success:
            - Shakemap_start
        Shakemap_start:
          target: Shakemap
          activities:
            - call_operation: Standard.start
          on_success:
            - Shakemap_started
        Shakemap_started:
          target: ShakemapService
          activities:
            - set_state: started
          on_success:
            - StageShakemapResults_start
        StageShakemapResults_start:
          target: StageShakemapResults
          activities:
            - call_operation: Standard.start
          on_success:
            - StageShakemapResults_started
        StageShakemapResults_started:
          target: StageShakemapResults
          activities:
            - set_state: started
          on_success:
            - ShakemapResultsCloudToDDIJob_create
        ShakemapResultsCloudToDDIJob_create:
          target: ShakemapResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - ShakemapResultsCloudToDDIJob_submit
        ShakemapResultsCloudToDDIJob_submit:
          target: ShakemapResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - ShakemapResultsCloudToDDIJob_submitted
        ShakemapResultsCloudToDDIJob_submitted:
          target: ShakemapResultsCloudToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - ShakemapResultsCloudToDDIJob_run
        ShakemapResultsCloudToDDIJob_run:
          target: ShakemapResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - ShakemapResultsCloudToDDIJob_executed
        ShakemapResultsCloudToDDIJob_executed:
          target: ShakemapResultsCloudToDDIJob
          activities:
            - set_state: executed
          on_success:
            - MountTransferredDataset_stop
        MountTransferredDataset_stop:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountTransferredDataset_stopped
        MountTransferredDataset_stopped:
          target: MountTransferredDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudTransferredDataJob_create
        DeleteCloudTransferredDataJob_create:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudTransferredDataJob_created
        DeleteCloudTransferredDataJob_created:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudTransferredDataJob_submit
        DeleteCloudTransferredDataJob_submit:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudTransferredDataJob_submitted
        DeleteCloudTransferredDataJob_submitted:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudTransferredDataJob_run
        DeleteCloudTransferredDataJob_run:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudTransferredDataJob_executed
        DeleteCloudTransferredDataJob_executed:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: executed
    testShakemap:
      steps:
        Shakemap_start:
          target: Shakemap
          activities:
            - call_operation: Standard.start
          on_success:
            - Shakemap_started
        Shakemap_started:
          target: ShakemapService
          activities:
            - set_state: started
    testStageShakemapResults:
      steps:
        StageShakemapResults_start:
          target: StageShakemapResults
          activities:
            - call_operation: Standard.start
          on_success:
            - StageShakemapResults_started
        StageShakemapResults_started:
          target: StageShakemapResults
          activities:
            - set_state: started
          on_success:
            - ShakemapResultsCloudToDDIJob_create
        ShakemapResultsCloudToDDIJob_create:
          target: ShakemapResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - ShakemapResultsCloudToDDIJob_submit
        ShakemapResultsCloudToDDIJob_submit:
          target: ShakemapResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - ShakemapResultsCloudToDDIJob_submitted
        ShakemapResultsCloudToDDIJob_submitted:
          target: ShakemapResultsCloudToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - ShakemapResultsCloudToDDIJob_run
        ShakemapResultsCloudToDDIJob_run:
          target: ShakemapResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - ShakemapResultsCloudToDDIJob_executed
        ShakemapResultsCloudToDDIJob_executed:
          target: ShakemapResultsCloudToDDIJob
          activities:
            - set_state: executed
          on_success:
            - MountTransferredDataset_stop
        MountTransferredDataset_stop:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountTransferredDataset_stopped
        MountTransferredDataset_stopped:
          target: MountTransferredDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudTransferredDataJob_create
        DeleteCloudTransferredDataJob_create:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudTransferredDataJob_created
        DeleteCloudTransferredDataJob_created:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudTransferredDataJob_submit
        DeleteCloudTransferredDataJob_submit:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudTransferredDataJob_submitted
        DeleteCloudTransferredDataJob_submitted:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudTransferredDataJob_run
        DeleteCloudTransferredDataJob_run:
          target: DeleteCloudTransferredDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudTransferredDataJob_executed
        DeleteCloudTransferredDataJob_executed:
          target: DeleteCloudTransferredDataJob
          activities:
            - set_state: executed
