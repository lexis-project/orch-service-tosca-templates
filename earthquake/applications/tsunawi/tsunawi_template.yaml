tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.wp6.TsunAWITemplate
  template_version: 0.1.0-SNAPSHOT
  template_author: lexis

description: "TsunAWI workflow template"

imports:
  - yorc-types:1.1.0
  - yorc-openstack-types:3.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - docker-types:3.0.0
  - alien-base-types:3.0.0
  - org.lexis.common.ddi-types:1.0.3
  - org.lexis.common.heappe-types:1.0.8
  - org.lexis.common.dynamic-orchestration-types:1.0.3
  - org.ystia.docker.containers.docker.generic:3.0.1-SNAPSHOT
  - org.ystia.docker.ansible:3.0.0-SNAPSHOT
  - org.lexis.common.datatransfer:0.1.6-SNAPSHOT
  - org.lexis.common.tsunawi.shakemap:0.0.1-SNAPSHOT

topology_template:
  inputs:
    token:
      type: string
      description: "Access token"
      required: true
    project_id:
      type: string
      description: "LEXIS project identifier"
      required: true
    preprocessing_dataset_path_quakeml_input_data_path:
      type: string
      description: Input dataset containing the quakeml event
      required: true
    postprocessing_title_for_result_datasets:
      type: string
      description: String used in result datatsets 
      required: true
    preprocessing_dataset_path_loss_calculator_data_path:
      type: string
      description: "Zipped archive containing loss calculator data"
      required: false
      default: project/proj19de37bda794a92aa6e514994bf0f930/2c109690-5c52-11ec-bdf5-b8599f568450/losscalculator_data.tar.gz
    preprocessing_decrypt_dataset_loss_calculator_data:
      type: boolean
      description: Should the loss calculator data dataset be decrypted
      default: false
      required: false
    preprocessing_uncompress_dataset_loss_calculator_data:
      type: boolean
      description: Should the loss calculator data be uncompressed
      default: true
      required: false
    preprocessing_image_shakemap_service:
      type: string
      description: Shakemap service docker image
      required: false
      default: "laurentg/shakemapi:0.0.3"
    preprocessing_image_loss_calculator_service:
      type: string
      description: Loss calculator service docker image
      required: false
      default: "laurentg/losscalculator:0.0.3"
    computation_heappe_command_template_name:
      type: string
      description: HEAppE Command Template Name
      required: false
      default: GenericCommandTemplate
    computation_hpc_subdirectory_to_stage:
      description: Relative path to a subddirectoy on the HPC job cluster file system, to stage
      type: string
      required: false
      default: output
    computation_tsunawi_job:
      type: org.lexis.common.heappe.types.JobSpecification
      description: Description of the HEAppE job/tasks
      required: false
      default:
        Name: GenericJob
        Project: "Set by orchestrator"
        ClusterId: 1
        Tasks:
          - Name: GenericCommandTemplate
            ClusterNodeTypeId: 1
            CommandTemplateId: 1
            TemplateParameterValues:
              - CommandParameterIdentifier: userScriptPath
                ParameterValue: "/mnt/proj3/open-22-3/karolina_complete.sh"
              - CommandParameterIdentifier: precise
                ParameterValue: "TRUE"
            WalltimeLimit: 3600
            MinCores: 128
            MaxCores: 128
            Priority: 4
            StandardOutputFile: "stdout"
            StandardErrorFile: "stderr"
            ProgressFile: "stdprog"
            LogFile: "stdlog"
    postprocessing_image_area_of_interest:
      type: string
      description:
      required: false
      default: "nithador/ithaca_lexis"
    postprocessing_ddi_project_path:
      type: string
      description: Path where to transfer the post-processing results in DDI
      default: "project/proj19de37bda794a92aa6e514994bf0f930"
      required: false
    postprocessing_encrypt_dataset_result:
      type: boolean
      description: Encrypt the result dataset
      default: false
      required: false
    postprocessing_compress_dataset_result:
      type: boolean
      description: Compress the result dataset
      default: false
      required: false
  node_templates:
    # Validation of the token provided in input
    # Exchanging this token to have an access and refresh tokens
    # for any component needing it in the workflow
    ValidateExchangeToken:
      type: org.lexis.common.dynamic.orchestration.nodes.ValidateAndExchangeToken
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }

    # Job gathering info on the input dataset:
    # - on which locations it is available
    # - size
    # - number of files
    # to take placement decisions on computing resources using this dataset
    InputDatasetInfoJob:
      type: org.lexis.common.ddi.nodes.GetDDIDatasetInfoJob
      properties:
        token: {get_input: token}
        dataset_path: {get_input: preprocessing_dataset_path_quakeml_input_data_path}

    # Find the best cloud location depending on the input dataset and needed cloud resources
    FindCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: InputDatasetInfoJob
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - CloudResourceVM:
            type_requirement: cloud_instance
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource

    # Transfer the earthquake event dataset to the cloud staging area
    DDIToCloudTransferJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: {get_input: token}
        decrypt: false
        uncompress: false
        ddi_dataset_path: { get_input: preprocessing_dataset_path_quakeml_input_data_path }
        cloud_staging_area_directory_path: "tsunawi_preprocessing"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite

    # Transfer the loss calculator dataset to the cloud staging area
    DDIToCloudLossCalculatorDataTransferJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: {get_input: token}
        decrypt: {get_input: preprocessing_decrypt_dataset_loss_calculator_data}
        uncompress: {get_input: preprocessing_uncompress_dataset_loss_calculator_data}
        ddi_dataset_path: { get_input: preprocessing_dataset_path_loss_calculator_data_path }
        cloud_staging_area_directory_path: "tsunawi_preprocessing"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite

    # Floating IP address network
    PublicNet:
      type: yorc.nodes.openstack.FloatingIP
    # Cloud instance used for shakemap computation
    ShakemapVM:
      type: tosca.nodes.Compute
      requirements:
        - networkPublicNetConnection:
            type_requirement: network
            node: PublicNet
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            num_cpus: 2
            disk_size: "40 GB"
        os:
          properties:
            type: linux
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    # At the end of the workflow, the Cloud instance token should be refreshed
    # before attempting to uninstall the compute instance
    RefreshShakemapVMToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ShakemapVM
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    Docker:
      type: org.ystia.docker.ansible.nodes.Docker
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Shakemap service docker container
    ShakemapService:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: preprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: true
        hostname: shakemapi
        image: {get_input: preprocessing_image_shakemap_service}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        shm_size: "1024 MB"
        volumes: []
        published_ports:
          - "8082:8082"
          - "8000:8000"
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
    # Loss calculator service docker container
    LossCalculatorService:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: preprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: true
        image: {get_input: preprocessing_image_loss_calculator_service}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        shm_size: "1024 MB"
        network_mode: "container:ShakemapService-ShakemapService_0"
        docker_env_vars:
          SHAKEMAP_HOSTNAME: http://shakemapi:8082
        volumes:
          - "/shakemap/data/losscalculator_data:/losscalculator_data"
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime

    # Get details on how to access the cloud staging area
    GetDDIAccess:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    # Mount the cloud staging area on the VM to access the event dataset
    MountTransferredDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/tsunawi/event"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudTransferJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Mount the cloud staging area on the VM to access the Loss calculatordataset
    MountLossCalculatorDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/tsunawi/losscalculator"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudLossCalculatorDataTransferJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Find the quakeml file in mounted filesystem
    FindQuakemlFile:
      type: org.lexis.common.datatransfer.nodes.FindFileInStagingAreaDirectory
      properties:
        shell_patterns: ["*.quakeml"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountTransferredDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Copy the quakeml file locally
    CopyQuakemlFileFromStagingArea:
      type: org.lexis.common.datatransfer.nodes.CopyFromStagingArea
      properties:
        destination_directory:  "/shakemap"
        destination_file_name: "event.quakeml"
      requirements:
        - file_provider:
            type_requirement: file_provider
            node: FindQuakemlFile
            capability: org.lexis.common.datatransfer.capabilities.FileProvider
            relationship: org.lexis.common.datatransfer.relationships.FileProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Find the loss calculator data files in mounted filesystem
    FindLossCalculatorDataFiles:
      type: org.lexis.common.datatransfer.nodes.FindFilesInStagingAreaDirectory
      properties:
        shell_patterns:
          - "losscalculator_data"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountLossCalculatorDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    MoveLossCalculatorDataFromStagingArea:
      type: org.lexis.common.datatransfer.nodes.MoveFilesFromProvider
      properties:
        destination_directory: "/shakemap/data"
      requirements:
        - files_provider:
            type_requirement: files_provider
            node: FindLossCalculatorDataFiles
            capability: org.lexis.common.datatransfer.capabilities.FilesProvider
            relationship: org.lexis.common.datatransfer.relationships.FilesProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Run the client sending a request to loss calculator
    LossComputation:
      type: org.lexis.common.tsunawi.nodes.LossCalculator
      properties:
        quakeml_file_path: "/shakemap/event.quakeml"
        loss_calculator_result_file_path: "/tsunawi/data/loss-result.gpkg"
      requirements:
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Copy shakemap results to staging area
    StageLossResults:
      type: org.lexis.common.datatransfer.nodes.CopyFilesToStagingAreaDirectory
      properties:
        source_directory: "/tsunawi/data"
        source_files: [ "*result.gpkg" ]
      requirements:
        - staging_area_directory:
            type_requirement: cloud_area_directory_provider
            node: MountTransferredDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Stage shakemap results from the cloud stagig area to DDI
    LossResultsCloudToDDIJob:
      type: org.lexis.common.ddi.nodes.CloudToDDIJob
      properties:
        metadata: {concat: ["{\"creator\": [\"TsunAWI workflow\"], \"contributor\": [\"TsunAWI workflow\"], \"publisher\": [\"TsunAWI workflow\"], \"resourceType\": \"Dataset\", \"title\": \"Loss computation results - ", get_input: postprocessing_title_for_result_datasets, "\"}"]}
        token: { get_input: token }
        ddi_path: { get_input: postprocessing_ddi_project_path }
        source_file_name: "loss-result.gpkg"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountTransferredDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
    # Find the best HPC location depending on the input dataset and needed HPC resources
    FindHPCLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: InputDatasetInfoJob
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - HPCResourceHPCJob:
            type_requirement: heappe_job
            node: TsunAWIJob1
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.dynamic.orchestration.relationships.HeappeJob
        # Relationship OptionalHeappeJob, in case there isn't a second cluster for a second HPC job
        - HPCResource2HPCJob:
            type_requirement: heappe_job
            node: TsunAWIJob2
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.dynamic.orchestration.relationships.OptionalHeappeJob
    TsunAWIJob1:
      type: org.lexis.common.heappe.nodes.Job
      metadata:
        task: computation
      properties:
        token: { get_input: token }
        JobSpecification: { get_input: computation_tsunawi_job }
    TsunAWIJob2:
      type: org.lexis.common.heappe.nodes.Job
      metadata:
        task: computation
      properties:
        token: { get_input: token }
        JobSpecification: { get_input: computation_tsunawi_job }
    UrgentComputingMonitoringJob:
      type: org.lexis.common.heappe.nodes.UrgentComputingMonitorJob
      metadata:
        task: computation
      properties:
        token: {get_input: token}
        JobSpecification: { get_input: computation_tsunawi_job }
        cancelRemainingJobs: false
      requirements:
        - HEAppEJob1:
            type_requirement: heappe_job
            node: TsunAWIJob1
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.DependsOnJob
        - HEAppEJob2:
            type_requirement: heappe_job
            node: TsunAWIJob2
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.DependsOnJob
    # Transfer the input dataset to the job task input directory
    DDIToHPCTaskJob1:
      type: org.lexis.common.ddi.nodes.DDIToHPCTaskJob
      metadata:
        task: preprocessing
      properties:
        token: { get_input: token }
        decrypt: false
        uncompress: false
        ddi_dataset_path: { get_input: preprocessing_dataset_path_quakeml_input_data_path }
        task_name: { get_input: computation_heappe_command_template_name }
      requirements:
        - job:
            type_requirement: job
            node: TsunAWIJob1
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.SendInputsToJob
    DDIToHPCTaskJob2:
      type: org.lexis.common.ddi.nodes.DDIToHPCTaskJob
      metadata:
        task: preprocessing
      properties:
        token: { get_input: token }
        decrypt: false
        uncompress: false
        ddi_dataset_path: { get_input: preprocessing_dataset_path_quakeml_input_data_path }
        task_name: { get_input: computation_heappe_command_template_name }
      requirements:
        - job:
            type_requirement: job
            node: TsunAWIJob2
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.SendInputsToJob
    # Transfer HPC job results to the cloud staging area
    HPCToCloudTsunAWIJob:
      type: org.lexis.common.ddi.nodes.HPCToCloudJob
      properties:
        token: { get_input: token }
        task_name: { get_input: computation_heappe_command_template_name }
        cloud_staging_area_directory_path: "tsunawi_results"
        timestamp_cloud_staging_area_directory: true
        source_subdirectory: { get_input: computation_hpc_subdirectory_to_stage }
      requirements:
        - sameSite:
            type_requirement: os
            node: ShakemapVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
        - job:
            type_requirement: job
            node: UrgentComputingMonitoringJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    # Transfer HPC job results to DDI
    HPCToDDIJob:
      type: org.lexis.common.ddi.nodes.HPCToDDIJob
      metadata:
        task: preprocessing
      properties:
        token: { get_input: token }
        metadata: {concat: ["{\"creator\": [\"TsunAWI workflow\"], \"contributor\": [\"TsunAWI workflow\"], \"publisher\": [\"TsunAWI workflow\"], \"resourceType\": \"Dataset\", \"title\": \"TsunAWI Workflow HPC result - ", get_input: postprocessing_title_for_result_datasets, "\"}"]}
        encrypt: false
        compress: false
        ddi_path: { get_input: postprocessing_ddi_project_path }
        task_name: { get_input: computation_heappe_command_template_name }
        source_subdirectory: { get_input: computation_hpc_subdirectory_to_stage }
      requirements:
        - job:
            type_requirement: job
            node: UrgentComputingMonitoringJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    # Mount the cloud staging area on the VM to access the TsunAWI dataset result
    MountTsunAWIResultDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/tsunawi/results"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: HPCToCloudTsunAWIJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    FindTsunAWIResultFiles:
      type: org.lexis.common.datatransfer.nodes.FindFilesInStagingAreaDirectory
      properties:
        shell_patterns:
          - "*.tiff"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountTsunAWIResultDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    MoveTsunAWIResultFiles:
      type: org.lexis.common.datatransfer.nodes.MoveFilesFromProvider
      properties:
        destination_directory: "/tsunawi/data"
      requirements:
        - files_provider:
            type_requirement: files_provider
            node: FindTsunAWIResultFiles
            capability: org.lexis.common.datatransfer.capabilities.FilesProvider
            relationship: org.lexis.common.datatransfer.relationships.FilesProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    CreatePostProcessDirs:
      type: org.lexis.common.datatransfer.nodes.CreateDirectories
      properties:
        directories:
          - "/tsunawi/results"
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Container computing area of interest from TsunAWI and shakemap results
    AreaOfInterest:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: postprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: false
        image: {get_input: postprocessing_image_area_of_interest}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        shm_size: "1024 MB"
        volumes: ["/tsunawi/data:/external/input_data","/tsunawi/results:/external/output"]
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
    # Create a directory on cloud staging area where to store results
    CreateStagingAreaResultDir:
      type: org.lexis.common.datatransfer.nodes.CreateStagingAreaDirectory
      properties:
        directory: "area_of_interest_results"
      requirements:
        - mountedCloudStagingArea:
            type_requirement: mounted_staging_area
            node: MountTsunAWIResultDataset
            capability: org.lexis.common.ddi.capabilities.MountedStagingAreaAccess
            relationship: org.lexis.common.datatransfer.relationships.MountedCloudStagingArea
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Move results to cloud staging area
    MoveAreaOfInterestResults:
      type: org.lexis.common.datatransfer.nodes.MoveToStagingAreaDirectory
      properties:
        source_directory: "/tsunawi/results"
      requirements:
        - staging_area_directory:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaResultDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ShakemapVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Transfer results to DDI
    CloudToDDIJob:
      type: org.lexis.common.ddi.nodes.CloudToDDIJob
      properties:
        metadata: {concat: ["{\"creator\": [\"TsunAWI workflow\"], \"contributor\": [\"TsunAWI workflow\"], \"publisher\": [\"TsunAWI workflow\"], \"resourceType\": \"Dataset\", \"title\": \"TsunAWI Workflow area of interest result - ", get_input: postprocessing_title_for_result_datasets, "\"}"]}
        token: { get_input: token }
        ddi_path: { get_input: postprocessing_ddi_project_path }
        encrypt: {get_input: postprocessing_encrypt_dataset_result}
        compress: {get_input: postprocessing_compress_dataset_result}
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaResultDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
    #Cleanup the staging area
    DeleteCloudEventDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudTransferJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudLossCalculationDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudLossCalculatorDataTransferJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudTsunawiDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: HPCToCloudTsunAWIJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
  outputs:
    dataset_shakemap_results:
      description: DDI path to Shakemap results
      value: { get_attribute: [ LossResultsCloudToDDIJob, destination_path ] }
    dataset_tsunawi_results:
      description: DDI path to TsunAWI results
      value: { get_attribute: [ HPCToDDIJob, destination_path ] }
    dataset_area_of_interest_results:
      description: DDI path to Area of Interest results
      value: { get_attribute: [ CloudToDDIJob, destination_path ] }
  workflows:
    # At deployment time, validating the input token and exchanging it
    # to get an access/refresh token for the orchestrator
    install:
      steps:
        ValidateExchangeToken_start:
          target: ValidateExchangeToken
          activities:
            - call_operation: Standard.start
          on_success:
            - ValidateExchangeToken_started
        ValidateExchangeToken_started:
          target: ValidateExchangeToken
          activities:
            - set_state: started
    uninstall:
      steps:
        DeleteCloudEventDataJob_create:
          target: DeleteCloudEventDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudEventDataJob_created
        DeleteCloudEventDataJob_created:
          target: DeleteCloudEventDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudEventDataJob_submit
        DeleteCloudEventDataJob_submit:
          target: DeleteCloudEventDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudLossCalculationDataJob_create
        DeleteCloudLossCalculationDataJob_create:
          target: DeleteCloudLossCalculationDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudLossCalculationDataJob_created
        DeleteCloudLossCalculationDataJob_created:
          target: DeleteCloudLossCalculationDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudLossCalculationDataJob_submit
        DeleteCloudLossCalculationDataJob_submit:
          target: DeleteCloudLossCalculationDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
           - DeleteCloudTsunawiDataJob_create
        DeleteCloudTsunawiDataJob_create:
          target: DeleteCloudTsunawiDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudTsunawiDataJob_created
        DeleteCloudTsunawiDataJob_created:
          target: DeleteCloudTsunawiDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudTsunawiDataJob_submit
        DeleteCloudTsunawiDataJob_submit:
          target: DeleteCloudTsunawiDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - TsunAWIJob1_delete
        TsunAWIJob1_delete:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - TsunAWIJob1_deleted
        TsunAWIJob1_deleted:
          target: TsunAWIJob1
          activities:
            - set_state: deleted
          on_success:
            - TsunAWIJob2_delete
        TsunAWIJob2_delete:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - TsunAWIJob2_deleted
        TsunAWIJob2_deleted:
          target: TsunAWIJob2
          activities:
            - set_state: deleted
          on_success:
            - UrgentComputingMonitoringJob_delete
        UrgentComputingMonitoringJob_delete:
          target: UrgentComputingMonitoringJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - UrgentComputingMonitoringJob_deleted
        UrgentComputingMonitoringJob_deleted:
          target: UrgentComputingMonitoringJob
          activities:
            - set_state: deleted
          on_success:
            - RefreshShakemapVMToken_start
        RefreshShakemapVMToken_start:
          target: RefreshShakemapVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshShakemapVMToken_started
        RefreshShakemapVMToken_started:
          target: RefreshShakemapVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ShakemapVM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNet
          activities:
            - delegate: uninstall
    Run:
      steps:
        # Submit DDI job to get info on dataset (DDI location where it is available, size...)
        InputDatasetInfoJob_submit:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - InputDatasetInfoJob_run
        InputDatasetInfoJob_run:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - InputDatasetInfoJob_executed
        InputDatasetInfoJob_executed:
          target: InputDatasetInfoJob
          activities:
            - set_state: executed
          on_success:
            - FindHPCLocationJob_submit
        # Submit the computation to find the best HPC location for these inputs
        FindHPCLocationJob_submit:
          target: FindHPCLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindHPCLocationJob_run
            - FindCloudLocationJob_submit
        FindHPCLocationJob_run:
          target: FindHPCLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindHPCLocationJob_executed
        FindHPCLocationJob_executed:
          target: FindHPCLocationJob
          activities:
            - set_state: executed
          on_success:
            - TsunAWIJob1_create
            - TsunAWIJob2_create
        # Submit the computation to find the best Cloud location for these inputs
        FindCloudLocationJob_submit:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindCloudLocationJob_run
        FindCloudLocationJob_run:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindCloudLocationJob_executed
        FindCloudLocationJob_executed:
          target: FindCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - Network_install
            - DDIToCloudTransferJob_create
        Network_install:
          target: PublicNet
          activities:
            - delegate: install
          on_success:
            - Compute_install
        Compute_install:
          target: ShakemapVM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccess_start
            - Docker_create
        Docker_create:
          target: Docker
          activities:
            - call_operation: Standard.create
          on_success:
            - Docker_configure
        Docker_configure:
          target: Docker
          activities:
            - call_operation: Standard.configure
          on_success:
            - Docker_start
        Docker_start:
          target: Docker
          activities:
            - call_operation: Standard.start
          on_success:
            - Docker_started
        Docker_started:
          target: Docker
          activities:
            - set_state: started
          on_success:
            - ShakemapService_create
        ShakemapService_create:
          target: ShakemapService
          activities:
            - call_operation: Standard.create
          on_success:
            - ShakemapService_start
            - MountTransferredDataset_create
        ShakemapService_start:
          target: ShakemapService
          activities:
            - call_operation: Standard.start
          on_success:
            - ShakemapService_started
        ShakemapService_started:
          target: ShakemapService
          activities:
            - set_state: started
          on_success:
            - LossCalculatorService_start
        LossCalculatorService_start:
          target: LossCalculatorService
          activities:
            - call_operation: Standard.start
          on_success:
            - LossCalculatorService_started
        LossCalculatorService_started:
          target: LossCalculatorService
          activities:
            - set_state: started
          on_success:
            - LossComputation_start
        DDIToCloudTransferJob_create:
          target: DDIToCloudTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudTransferJob_submit
        DDIToCloudTransferJob_submit:
          target: DDIToCloudTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudTransferJob_submitted
            - DDIToCloudLossCalculatorDataTransferJob_create
        DDIToCloudTransferJob_submitted:
          target: DDIToCloudTransferJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudTransferJob_run
        DDIToCloudTransferJob_run:
          target: DDIToCloudTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudTransferJob_executed
        DDIToCloudTransferJob_executed:
          target: DDIToCloudTransferJob
          activities:
            - set_state: executed
          on_success:
            - MountTransferredDataset_create
        DDIToCloudLossCalculatorDataTransferJob_create:
          target: DDIToCloudLossCalculatorDataTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudLossCalculatorDataTransferJob_submit
        DDIToCloudLossCalculatorDataTransferJob_submit:
          target: DDIToCloudLossCalculatorDataTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudLossCalculatorDataTransferJob_submitted
        DDIToCloudLossCalculatorDataTransferJob_submitted:
          target: DDIToCloudLossCalculatorDataTransferJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudLossCalculatorDataTransferJob_run
        DDIToCloudLossCalculatorDataTransferJob_run:
          target: DDIToCloudLossCalculatorDataTransferJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudLossCalculatorDataTransferJob_executed
        DDIToCloudLossCalculatorDataTransferJob_executed:
          target: DDIToCloudLossCalculatorDataTransferJob
          activities:
            - set_state: executed
          on_success:
            - MountLossCalculatorDataset_create
        GetDDIAccess_start:
          target: GetDDIAccess
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccess_started
        GetDDIAccess_started:
          target: GetDDIAccess
          activities:
            - set_state: started
          on_success:
            - MountTransferredDataset_create
        MountTransferredDataset_create:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountTransferredDataset_created
        MountTransferredDataset_created:
          target: MountTransferredDataset
          activities:
            - set_state: created
          on_success:
            - MountTransferredDataset_refresh_token
        MountTransferredDataset_refresh_token:
          target: MountTransferredDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountTransferredDataset_start
        MountTransferredDataset_start:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountTransferredDataset_started
        MountTransferredDataset_started:
          target: MountTransferredDataset
          activities:
            - set_state: started
          on_success:
            - FindQuakemlFile_start
            - MountLossCalculatorDataset_create
        FindQuakemlFile_start:
          target: FindQuakemlFile
          activities:
            - call_operation: Standard.start
          on_success:
            - FindQuakemlFile_started
        FindQuakemlFile_started:
          target: FindQuakemlFile
          activities:
            - set_state: started
          on_success:
            - CopyQuakemlFileFromStagingArea_start
        CopyQuakemlFileFromStagingArea_start:
          target: CopyQuakemlFileFromStagingArea
          activities:
            - call_operation: Standard.start
          on_success:
            - CopyQuakemlFileFromStagingArea_started
        CopyQuakemlFileFromStagingArea_started:
          target: CopyQuakemlFileFromStagingArea
          activities:
            - set_state: started
          on_success:
            - LossComputation_start
        MountLossCalculatorDataset_create:
          target: MountLossCalculatorDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountLossCalculatorDataset_created
        MountLossCalculatorDataset_created:
          target: MountLossCalculatorDataset
          activities:
            - set_state: created
          on_success:
            - MountLossCalculatorDataset_refresh_token
        MountLossCalculatorDataset_refresh_token:
          target: MountLossCalculatorDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountLossCalculatorDataset_start
        MountLossCalculatorDataset_start:
          target: MountLossCalculatorDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountLossCalculatorDataset_started
        MountLossCalculatorDataset_started:
          target: MountLossCalculatorDataset
          activities:
            - set_state: started
          on_success:
            - MountTsunAWIResultDataset_refresh_token
            - FindLossCalculatorDataFiles_start
        FindLossCalculatorDataFiles_start:
          target: FindLossCalculatorDataFiles
          activities:
            - call_operation: Standard.start
          on_success:
            - FindLossCalculatorDataFiles_started
        FindLossCalculatorDataFiles_started:
          target: FindLossCalculatorDataFiles
          activities:
            - set_state: started
          on_success:
            - MoveLossCalculatorDataFromStagingArea_start
        MoveLossCalculatorDataFromStagingArea_start:
          target: MoveLossCalculatorDataFromStagingArea
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveLossCalculatorDataFromStagingArea_started
        MoveLossCalculatorDataFromStagingArea_started:
          target: MoveLossCalculatorDataFromStagingArea
          activities:
            - set_state: started
          on_success:
            - LossCalculatorService_start
        LossComputation_start:
          target: LossComputation
          activities:
            - call_operation: Standard.start
          on_success:
            - LossComputation_started
        LossComputation_started:
          target: LossComputation
          activities:
            - set_state: started
          on_success:
            - AreaOfInterest_create
            - StageLossResults_start
        StageLossResults_start:
          target: StageLossResults
          activities:
            - call_operation: Standard.start
          on_success:
            - StageLossResults_started
        StageLossResults_started:
          target: StageLossResults
          activities:
            - set_state: started
          on_success:
            - LossResultsCloudToDDIJob_create
        LossResultsCloudToDDIJob_create:
          target: LossResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - LossResultsCloudToDDIJob_submit
        LossResultsCloudToDDIJob_submit:
          target: LossResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - LossResultsCloudToDDIJob_submitted
        LossResultsCloudToDDIJob_submitted:
          target: LossResultsCloudToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - LossResultsCloudToDDIJob_run
        LossResultsCloudToDDIJob_run:
          target: LossResultsCloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - LossResultsCloudToDDIJob_executed
        LossResultsCloudToDDIJob_executed:
          target: LossResultsCloudToDDIJob
          activities:
            - set_state: executed
          on_success:
            - MountTransferredDataset_stop
        TsunAWIJob1_create:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - TsunAWIJob1_enable_file_transfer
            - UrgentComputingMonitoringJob_create
        TsunAWIJob1_enable_file_transfer:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.enable_file_transfer
          on_success:
            - DDIToHPCTaskJob1_create
        DDIToHPCTaskJob1_create:
          target: DDIToHPCTaskJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToHPCTaskJob1_submit
        DDIToHPCTaskJob1_submit:
          target: DDIToHPCTaskJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToHPCTaskJob1_submitted
        DDIToHPCTaskJob1_submitted:
          target: DDIToHPCTaskJob1
          activities:
            - set_state: submitted
          on_success:
            - DDIToHPCTaskJob1_run
        DDIToHPCTaskJob1_run:
          target: DDIToHPCTaskJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToHPCTaskJob1_executed
        DDIToHPCTaskJob1_executed:
          target: DDIToHPCTaskJob1
          activities:
            - set_state: executed
          on_success:
            - TsunAWIJob1_submit
        TsunAWIJob1_submit:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - TsunAWIJob1_submitted
        TsunAWIJob1_submitted:
          target: TsunAWIJob1
          activities:
            - set_state: submitted
          on_success:
            - TsunAWIJob1_run
        TsunAWIJob1_run:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - TsunAWIJob1_executed
        TsunAWIJob1_executed:
          target: TsunAWIJob1
          activities:
            - set_state: executed
        TsunAWIJob2_create:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - TsunAWIJob2_enable_file_transfer
            - UrgentComputingMonitoringJob_create
        TsunAWIJob2_enable_file_transfer:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.enable_file_transfer
          on_success:
            - DDIToHPCTaskJob2_create
        DDIToHPCTaskJob2_create:
          target: DDIToHPCTaskJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToHPCTaskJob2_submit
        DDIToHPCTaskJob2_submit:
          target: DDIToHPCTaskJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToHPCTaskJob2_submitted
        DDIToHPCTaskJob2_submitted:
          target: DDIToHPCTaskJob2
          activities:
            - set_state: submitted
          on_success:
            - DDIToHPCTaskJob2_run
        DDIToHPCTaskJob2_run:
          target: DDIToHPCTaskJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToHPCTaskJob2_executed
        DDIToHPCTaskJob2_executed:
          target: DDIToHPCTaskJob2
          activities:
            - set_state: executed
          on_success:
            - TsunAWIJob2_submit
        TsunAWIJob2_submit:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - TsunAWIJob2_submitted
        TsunAWIJob2_submitted:
          target: TsunAWIJob2
          activities:
            - set_state: submitted
          on_success:
            - TsunAWIJob2_run
        TsunAWIJob2_run:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - TsunAWIJob2_executed
        TsunAWIJob2_executed:
          target: TsunAWIJob2
          activities:
            - set_state: executed
        UrgentComputingMonitoringJob_create:
          target: UrgentComputingMonitoringJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - UrgentComputingMonitoringJob_submit
        UrgentComputingMonitoringJob_submit:
          target: UrgentComputingMonitoringJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - UrgentComputingMonitoringJob_submitted
        UrgentComputingMonitoringJob_submitted:
          target: UrgentComputingMonitoringJob
          activities:
            - set_state: submitted
          on_success:
            - UrgentComputingMonitoringJob_run
        UrgentComputingMonitoringJob_run:
          target: UrgentComputingMonitoringJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - UrgentComputingMonitoringJob_executed
        UrgentComputingMonitoringJob_executed:
          target: UrgentComputingMonitoringJob
          activities:
            - set_state: executed
          on_success:
            - HPCToCloudTsunAWIJob_create
        # Transfer HPC results from HPC to Cloud staging area
        HPCToCloudTsunAWIJob_create:
          target: HPCToCloudTsunAWIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToCloudTsunAWIJob_submit
        HPCToCloudTsunAWIJob_submit:
          target: HPCToCloudTsunAWIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToCloudTsunAWIJob_submitted
        HPCToCloudTsunAWIJob_submitted:
          target: HPCToCloudTsunAWIJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToCloudTsunAWIJob_run
        HPCToCloudTsunAWIJob_run:
          target: HPCToCloudTsunAWIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToCloudTsunAWIJob_executed
        HPCToCloudTsunAWIJob_executed:
          target: HPCToCloudTsunAWIJob
          activities:
            - set_state: executed
          on_success:
            - MountTsunAWIResultDataset_refresh_token
        MountTsunAWIResultDataset_refresh_token:
          target: MountTsunAWIResultDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountTsunAWIResultDataset_start
        MountTsunAWIResultDataset_start:
          target: MountTsunAWIResultDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountTsunAWIResultDataset_started
        MountTsunAWIResultDataset_started:
          target: MountTsunAWIResultDataset
          activities:
            - set_state: started
          on_success:
            - FindTsunAWIResultFiles_start
            - HPCToDDIJob_create
        # Transfer HPC job results to DDI
        HPCToDDIJob_create:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToDDIJob_submit
        HPCToDDIJob_submit:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToDDIJob_submitted
        HPCToDDIJob_submitted:
          target: HPCToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToDDIJob_run
        HPCToDDIJob_run:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToDDIJob_executed
        HPCToDDIJob_executed:
          target: HPCToDDIJob
          activities:
            - set_state: executed
          on_success:
            - CloudToDDIJob_create
        FindTsunAWIResultFiles_start:
          target: FindTsunAWIResultFiles
          activities:
            - call_operation: Standard.start
          on_success:
            - FindTsunAWIResultFiles_started
        FindTsunAWIResultFiles_started:
          target: FindTsunAWIResultFiles
          activities:
            - set_state: started
          on_success:
            - MoveTsunAWIResultFiles_start
        MoveTsunAWIResultFiles_start:
          target: MoveTsunAWIResultFiles
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveTsunAWIResultFiles_started
        MoveTsunAWIResultFiles_started:
          target: MoveTsunAWIResultFiles
          activities:
            - set_state: started
          on_success:
            - CreatePostProcessDirs_start
        CreatePostProcessDirs_start:
          target: CreatePostProcessDirs
          activities:
            - call_operation: Standard.start
          on_success:
            - CreatePostProcessDirs_started
        CreatePostProcessDirs_started:
          target: CreatePostProcessDirs
          activities:
            - set_state: started
          on_success:
            - AreaOfInterest_create
        AreaOfInterest_create:
          target: AreaOfInterest
          activities:
            - call_operation: Standard.create
          on_success:
            - AreaOfInterest_start
        AreaOfInterest_start:
          target: AreaOfInterest
          activities:
            - call_operation: Standard.start
          on_success:
            - AreaOfInterest_started
        AreaOfInterest_started:
          target: AreaOfInterest
          activities:
            - set_state: started
          on_success:
            - CreateStagingAreaResultDir_start
        CreateStagingAreaResultDir_start:
          target: CreateStagingAreaResultDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateStagingAreaResultDir_started
        CreateStagingAreaResultDir_started:
          target: CreateStagingAreaResultDir
          activities:
            - set_state: started
          on_success:
            - MoveAreaOfInterestResults_start
        MoveAreaOfInterestResults_start:
          target: MoveAreaOfInterestResults
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveAreaOfInterestResults_started
        MoveAreaOfInterestResults_started:
          target: MoveAreaOfInterestResults
          activities:
            - set_state: started
          on_success:
            - CloudToDDIJob_create
        CloudToDDIJob_create:
          target: CloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - CloudToDDIJob_submit
        CloudToDDIJob_submit:
          target: CloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - CloudToDDIJob_submitted
        CloudToDDIJob_submitted:
          target: CloudToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - CloudToDDIJob_run
        CloudToDDIJob_run:
          target: CloudToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - CloudToDDIJob_executed
        CloudToDDIJob_executed:
          target: CloudToDDIJob
          activities:
            - set_state: executed
          on_success:
            - MountTransferredDataset_refresh_token_for_stop
        MountTransferredDataset_refresh_token_for_stop:
          target: MountTransferredDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountTransferredDataset_stop
        MountTransferredDataset_stop:
          target: MountTransferredDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountTransferredDataset_stopped
        MountTransferredDataset_stopped:
          target: MountTransferredDataset
          activities:
            - set_state: stopped
          on_success:
            - MountLossCalculatorDataset_refresh_token_for_stop
        MountLossCalculatorDataset_refresh_token_for_stop:
          target: MountLossCalculatorDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountLossCalculatorDataset_stop
        MountLossCalculatorDataset_stop:
          target: MountLossCalculatorDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountLossCalculatorDataset_stopped
        MountLossCalculatorDataset_stopped:
          target: MountLossCalculatorDataset
          activities:
            - set_state: stopped
          on_success:
            - MountTsunAWIResultDataset_refresh_token_for_stop
        MountTsunAWIResultDataset_refresh_token_for_stop:
          target: MountTsunAWIResultDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountTsunAWIResultDataset_stop
        MountTsunAWIResultDataset_stop:
          target: MountTsunAWIResultDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountTsunAWIResultDataset_stopped
        MountTsunAWIResultDataset_stopped:
          target: MountTsunAWIResultDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudEventDataJob_create
        DeleteCloudEventDataJob_create:
          target: DeleteCloudEventDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudEventDataJob_created
        DeleteCloudEventDataJob_created:
          target: DeleteCloudEventDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudEventDataJob_submit
        DeleteCloudEventDataJob_submit:
          target: DeleteCloudEventDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudEventDataJob_submitted
        DeleteCloudEventDataJob_submitted:
          target: DeleteCloudEventDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudEventDataJob_run
        DeleteCloudEventDataJob_run:
          target: DeleteCloudEventDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudEventDataJob_executed
        DeleteCloudEventDataJob_executed:
          target: DeleteCloudEventDataJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudLossCalculationDataJob_create
        DeleteCloudLossCalculationDataJob_create:
          target: DeleteCloudLossCalculationDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudLossCalculationDataJob_created
        DeleteCloudLossCalculationDataJob_created:
          target: DeleteCloudLossCalculationDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudLossCalculationDataJob_submit
        DeleteCloudLossCalculationDataJob_submit:
          target: DeleteCloudLossCalculationDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudLossCalculationDataJob_submitted
        DeleteCloudLossCalculationDataJob_submitted:
          target: DeleteCloudLossCalculationDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudLossCalculationDataJob_run
        DeleteCloudLossCalculationDataJob_run:
          target: DeleteCloudLossCalculationDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudLossCalculationDataJob_executed
        DeleteCloudLossCalculationDataJob_executed:
          target: DeleteCloudLossCalculationDataJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudTsunawiDataJob_create
        DeleteCloudTsunawiDataJob_create:
          target: DeleteCloudTsunawiDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudTsunawiDataJob_created
        DeleteCloudTsunawiDataJob_created:
          target: DeleteCloudTsunawiDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudTsunawiDataJob_submit
        DeleteCloudTsunawiDataJob_submit:
          target: DeleteCloudTsunawiDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudTsunawiDataJob_submitted
        DeleteCloudTsunawiDataJob_submitted:
          target: DeleteCloudTsunawiDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudTsunawiDataJob_run
        DeleteCloudTsunawiDataJob_run:
          target: DeleteCloudTsunawiDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudTsunawiDataJob_executed
        DeleteCloudTsunawiDataJob_executed:
          target: DeleteCloudTsunawiDataJob
          activities:
            - set_state: executed
          on_success:
            - TsunAWIJob1_disable_file_transfer
        TsunAWIJob1_disable_file_transfer:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.disable_file_transfer
          on_success:
            - TsunAWIJob1_delete
        TsunAWIJob1_delete:
          target: TsunAWIJob1
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - TsunAWIJob1_deleted
        TsunAWIJob1_deleted:
          target: TsunAWIJob1
          activities:
            - set_state: deleted
          on_success:
            - TsunAWIJob2_disable_file_transfer
        TsunAWIJob2_disable_file_transfer:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.disable_file_transfer
          on_success:
            - TsunAWIJob2_delete
        TsunAWIJob2_delete:
          target: TsunAWIJob2
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - TsunAWIJob2_deleted
        TsunAWIJob2_deleted:
          target: TsunAWIJob2
          activities:
            - set_state: deleted
          on_success:
            - RefreshShakemapVMToken_start
        RefreshShakemapVMToken_start:
          target: RefreshShakemapVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshShakemapVMToken_started
        RefreshShakemapVMToken_started:
          target: RefreshShakemapVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ShakemapVM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNet
          activities:
            - delegate: uninstall
