tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.common.OpenFOAMTemplate
  template_version: 0.1.0-SNAPSHOT
  template_author: lexis

description: "OpenFOAM template"

imports:
  - yorc-types:1.1.0
  - yorc-openstack-types:3.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:3.0.0
  - org.lexis.common.heappe-types:1.0.7
  - org.lexis.common.ddi-types:1.0.2
  - org.lexis.common.dynamic-orchestration-types:1.0.2
  - org.lexis.common.datatransfer:0.1.3-SNAPSHOT
  - org.lexis.common.visualization.xpra:0.1.0

topology_template:
  inputs:
    token:
      type: string
      description: "OpenID Connect token"
      required: true
    project_id:
      type: string
      description: "LEXIS project identifier"
      required: true
    preprocessing_dataset_path_input_path:
      type: string
      description: Input dataset path in DDI
      required: true
    computation_title_dataset_result:
      type: string
      description: Title of the result dataset to create in DDI
      required: true
    visualization_walltime_minutes:
      type: integer
      description: "Duration in minutes of the visualization session"
      required: true
    computation_ddi_project_path:
      type: string
      description: "Path of the project where to transfer the computation results in DDI: project/projxxx"
      required: true
    preprocessing_decrypt_input:
      type: boolean
      description: Should the input dataset be decrypted
      default: false
      required: false
    preprocessing_uncompress_input:
      type: boolean
      description: Should the input dataset be uncompressed
      default: false
      required: false
    computation_encrypt_dataset_result:
      type: boolean
      description: Encrypt the result dataset
      default: false
      required: false
    computation_compress_dataset_result:
      type: boolean
      description: Compress the result dataset
      default: false
      required: false
    visualization_directory:
      type: string
      description: Directory where visualization data will be stored
      default: "openfoam"
      required: false
    visualization_ca_pem:
      description: "PEM-encoded certificate authority content, will be generated if not provided"
      type: string
      required: false
    visualization_ca_key:
      description: "Certificate authority private key content, will be generated if not provided"
      type: string
      required: false
    visualization_ca_passphrase:
      description: "Certificate authority private key passphrase"
      type: string
      required: false
    visualization_port:
      type: integer
      description: "Port to use to expose the remote display (should be > 1024)"
      default: 8765
      required: false
  node_templates:
    # Validation of the token provided in input
    # Exchanging this token to have an access and refresh tokens
    # for any component needing it in the workflow
    ValidateExchangeToken:
      type: org.lexis.common.dynamic.orchestration.nodes.ValidateAndExchangeToken
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }

    # Job gathering info on the input dataset:
    # - on which locations it is available
    # - size
    # - number of files
    # to take placement decisions on computing resources using this dataset
    InputDatasetInfoJob:
      type: org.lexis.common.ddi.nodes.GetDDIDatasetInfoJob
      properties:
        token: {get_input: token}
        dataset_path: {get_input: preprocessing_dataset_path_input_path}
    # Find the best HPC location depending on the input dataset and needed HPC resources
    FindHPCLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token}
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: InputDatasetInfoJob
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - HPCResourceHPCJob:
            type_requirement: heappe_job
            node: OpenFOAMJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.dynamic.orchestration.relationships.HeappeJob
    # HEAppE job performing the OpenFOAM computation
    OpenFOAMJob:
      type: org.lexis.common.heappe.nodes.Job
      metadata:
        task: computation
      properties:
        token: { get_input: token }
        # TODO: set listChangedFilesWhileRunning to true for checkpointing
        listChangedFilesWhileRunning: false
        JobSpecification:
          Name: "OpenFoam"
          Project: "MyProject"
          ClusterId: 1
          Tasks:
            - Name: "OpenFoamParallel"
              ClusterNodeTypeId: 1
              CommandTemplateId: 6
              WalltimeLimit: 14400
              MinCores: 36
              MaxCores: 36
              Priority: 4
              TaskParalizationParameters:
                - MPIProcesses: 36
                  MaxCores: 36
              TemplateParameterValues:
                - CommandParameterIdentifier: MPI_PROCESSES
                  ParameterValue: "36"
              StandardOutputFile: "stdout"
              StandardErrorFile: "stderr"
              ProgressFile: "stdprog"
              LogFile: "stdlog"
    # Transfer the input dataset to the job task input directory
    DDIToHPCTaskJob:
      type: org.lexis.common.ddi.nodes.DDIToHPCTaskJob
      metadata:
        task: preprocessing
      properties:
        token: { get_input: token }
        decrypt: {get_input: preprocessing_decrypt_input}
        uncompress: {get_input: preprocessing_uncompress_input}
        ddi_dataset_path: { get_input: preprocessing_dataset_path_input_path }
        task_name: "OpenFoamParallel"
      requirements:
        - job:
            type_requirement: job
            node: OpenFOAMJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.SendInputsToJob
    # Transfer HEAppE OpenFOAM job results to DDI
    HPCToDDIJob:
      type: org.lexis.common.ddi.nodes.HPCToDDIJob
      metadata:
        task: preprocessing
      properties:
        token: { get_input: token }
        encrypt: {get_input: computation_encrypt_dataset_result}
        compress: {get_input: computation_compress_dataset_result}
        metadata: {concat: ["{\"creator\": [\"OpenFOAM workflow\"], \"contributor\": [\"OpenFOAM workflow\"], \"publisher\": [\"OpenFOAM workflow\"], \"resourceType\": \"Dataset\", \"title\": \"", get_input: computation_title_dataset_result, "\"}"]}
        ddi_path: { get_input: computation_ddi_project_path }
        task_name: "OpenFoamParallel"
      requirements:
        - job:
            type_requirement: job
            node: OpenFOAMJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    # Get HPC computation results details (size, number of files)
    GetHPCResultsDatasetInfo:
      type: org.lexis.common.ddi.nodes.GetHPCJobTaskDatasetInfo
      properties:
        task_name: "OpenFoamParallel"
        needed_files_patterns: [ "EnSight/.*" ]
      requirements:
        - job:
            type_requirement: job
            node: OpenFOAMJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    # Find the best cloud location depending on the input dataset and needed cloud resources
    FindCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: GetHPCResultsDatasetInfo
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - CloudResourceVM:
            type_requirement: cloud_instance
            node: OpenFOAMVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource    # Floating IP address network
    PublicNet:
      type: yorc.nodes.openstack.FloatingIP
    OpenFOAMVM:
      type: tosca.nodes.Compute
      requirements:
        - networkPublicNetConnection:
            type_requirement: network
            node: PublicNet
            capability: yorc.capabilities.openstack.FIPConnectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            disk_size: "40 GB"
            mem_size: "8 GB"
        os:
          properties:
            type: linux
            # Using ubuntu for the paraview install
            distribution: ubuntu
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    # At the end of the workflow, the Cloud instance token should be refreshed
    # before attempting to uninstall the compute instance
    RefreshVMToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: OpenFOAMVM
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    # Get DDI settings for the site where the VM is running
    GetDDIAccess:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: OpenFOAMVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    XpraJob:
      metadata:
        task: visualization
      type: org.lexis.common.visualization.xpra.nodes.XpraCloudJob
      properties:
        port: { get_input: visualization_port }
        walltime_minutes: { get_input: visualization_walltime_minutes }
        ca_pem: { get_input: visualization_ca_pem }
        ca_key: { get_input: visualization_ca_key }
        ca_passphrase: { get_input: visualization_ca_passphrase }
      requirements:
        - hostedOnComputeHost:
            type_requirement: host
            node: OpenFOAMVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    CreateVisualizationDir:
      type: org.lexis.common.datatransfer.nodes.CreateDirectories
      properties:
        directories: {concat: ["[\"", get_input: visualization_directory, "\"]"]}
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: OpenFOAMVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Transfer HPC job results to the cloud staging area
    HPCToCloudJob:
      type: org.lexis.common.ddi.nodes.HPCToCloudJob
      properties:
        token: { get_input: token }
        task_name: "OpenFoamParallel"
        source_subdirectory: "EnSight"
        cloud_staging_area_directory_path: "openfoam_results"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: OpenFOAMVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
        - job:
            type_requirement: job
            node: OpenFOAMJob
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    MountCloudDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/openfoam_results"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: HPCToCloudJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: OpenFOAMVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Move results needed by the visualization
    MoveResults:
      type: org.lexis.common.datatransfer.nodes.MoveFile
      properties:
        source_file:  "/mnt/cloud_staging_area/openfoam_results/*/*"
        destination:  { get_input: visualization_directory }
        as_user: "root"
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: OpenFOAMVM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    DeleteCloudDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: HPCToCloudJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
  outputs:
    visualization_url:
      value: { get_attribute: [ XpraJob, url ] }
    computation_dataset_result_path:
      description: DDI path to OpenFOAM results
      value: { get_attribute: [ HPCToDDIJob, destination_path ] }
  workflows:
    # At deployment time, validating the input token and exchanging it
    # to get an access/refresh token for the orchestrator
    install:
      steps:
        ValidateExchangeToken_start:
          target: ValidateExchangeToken
          activities:
            - call_operation: Standard.start
          on_success:
            - ValidateExchangeToken_started
        ValidateExchangeToken_started:
          target: ValidateExchangeToken
          activities:
            - set_state: started
    Run:
      steps:
        # Submit DDI job to get info on dataset (DDI location where it is available, size...)
        InputDatasetInfoJob_submit:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - InputDatasetInfoJob_run
        InputDatasetInfoJob_run:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - InputDatasetInfoJob_executed
        InputDatasetInfoJob_executed:
          target: InputDatasetInfoJob
          activities:
            - set_state: executed
          on_success:
            - FindHPCLocationJob_submit
        # Submit the computation to find the best location from these inputs
        FindHPCLocationJob_submit:
          target: FindHPCLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindHPCLocationJob_run
        FindHPCLocationJob_run:
          target: FindHPCLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindHPCLocationJob_executed
        FindHPCLocationJob_executed:
          target: FindHPCLocationJob
          activities:
            - set_state: executed
          on_success:
            - OpenFOAMJob_create
        OpenFOAMJob_create:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - OpenFOAMJob_enable_file_transfer
        OpenFOAMJob_enable_file_transfer:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.enable_file_transfer
          on_success:
            - DDIToHPCTaskJob_create
        DDIToHPCTaskJob_create:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToHPCTaskJob_submit
        DDIToHPCTaskJob_submit:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToHPCTaskJob_submitted
        DDIToHPCTaskJob_submitted:
          target: DDIToHPCTaskJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToHPCTaskJob_run
        DDIToHPCTaskJob_run:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToHPCTaskJob_executed
        DDIToHPCTaskJob_executed:
          target: DDIToHPCTaskJob
          activities:
            - set_state: executed
          on_success:
            - OpenFOAMJob_submit
        OpenFOAMJob_submit:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - OpenFOAMJob_submitted
        OpenFOAMJob_submitted:
          target: OpenFOAMJob
          activities:
            - set_state: submitted
          on_success:
            - OpenFOAMJob_run
        OpenFOAMJob_run:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - OpenFOAMJob_executed
        OpenFOAMJob_executed:
          target: OpenFOAMJob
          activities:
            - set_state: executed
          on_success:
            - GetHPCResultsDatasetInfo_start
            - HPCToDDIJob_create
        # Transfer HPC results to DDI
        HPCToDDIJob_create:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToDDIJob_submit
        HPCToDDIJob_submit:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToDDIJob_run
        HPCToDDIJob_run:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToDDIJob_executed
        HPCToDDIJob_executed:
          target: HPCToDDIJob
          activities:
            - set_state: executed
          on_success:
            - OpenFOAMJob_disable_file_transfer
        #  Get info on HPC results dataset (size, number of files) 
        GetHPCResultsDatasetInfo_start:
          target: GetHPCResultsDatasetInfo
          activities:
            - call_operation: Standard.start
          on_success:
            - GetHPCResultsDatasetInfo_started
        GetHPCResultsDatasetInfo_started:
          target: GetHPCResultsDatasetInfo
          activities:
            - set_state: started
          on_success:
            - FindCloudLocationJob_submit
        # Submit the computation to find the best location from these inputs
        FindCloudLocationJob_submit:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindCloudLocationJob_run
        FindCloudLocationJob_run:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindCloudLocationJob_executed
        FindCloudLocationJob_executed:
          target: FindCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - PublicNet_install
        # Get a floating IP address for the Cloud Compute instance
        PublicNet_install:
          target: PublicNet
          activities:
            - delegate: install
          on_success:
            - OpenFOAMVM_install
        # Create the compute instance
        OpenFOAMVM_install:
          target: OpenFOAMVM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccess_start
            - CreateVisualizationDir_start
        GetDDIAccess_start:
          target: GetDDIAccess
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccess_started
        GetDDIAccess_started:
          target: GetDDIAccess
          activities:
            - set_state: started
          on_success:
            - HPCToCloudJob_create
        CreateVisualizationDir_start:
          target: CreateVisualizationDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateVisualizationDir_started
        CreateVisualizationDir_started:
          target: CreateVisualizationDir
          activities:
            - set_state: started
          on_success:
            - HPCToCloudJob_create
        # Transfer HPC results from HPC to Cloud staging area
        HPCToCloudJob_create:
          target: HPCToCloudJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToCloudJob_submit
        HPCToCloudJob_submit:
          target: HPCToCloudJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToCloudJob_submitted
        HPCToCloudJob_submitted:
          target: HPCToCloudJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToCloudJob_run
        HPCToCloudJob_run:
          target: HPCToCloudJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToCloudJob_executed
        HPCToCloudJob_executed:
          target: HPCToCloudJob
          activities:
            - set_state: executed
          on_success:
            - MountCloudDataset_create
        MountCloudDataset_create:
          target: MountCloudDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountCloudDataset_created
        MountCloudDataset_created:
          target: MountCloudDataset
          activities:
            - set_state: created
          on_success:
            - MountCloudDataset_refresh_token
        MountCloudDataset_refresh_token:
          target: MountCloudDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountCloudDataset_start
        MountCloudDataset_start:
          target: MountCloudDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountCloudDataset_started
        MountCloudDataset_started:
          target: MountCloudDataset
          activities:
            - set_state: started
          on_success:
            - MoveResults_start
        MoveResults_start:
          target: MoveResults
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveResults_started
        MoveResults_started:
          target: MoveResults
          activities:
            - set_state: started
          on_success:
            - OpenFOAMJob_disable_file_transfer
            - XpraJob_create
        OpenFOAMJob_disable_file_transfer:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.disable_file_transfer
          on_success:
            - OpenFOAMJob_delete
        OpenFOAMJob_delete:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
        XpraJob_create:
          target: XpraJob
          activities:
            - call_operation: Standard.create
          on_success:
            - XpraJob_submit
        XpraJob_submit:
          target: XpraJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - XpraJob_run
            - MountCloudDataset_refresh_token_for_stop
        XpraJob_run:
          target: XpraJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - XpraJob_executed
        XpraJob_executed:
          target: XpraJob
          activities:
            - set_state: executed
          on_success:
            - RefreshVMToken_start
        MountCloudDataset_refresh_token_for_stop:
          target: MountCloudDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountCloudDataset_stop
        MountCloudDataset_stop:
          target: MountCloudDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountCloudDataset_stopped
        MountCloudDataset_stopped:
          target: MountCloudDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudDataJob_create
        DeleteCloudDataJob_create:
          target: DeleteCloudDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataJob_created
        DeleteCloudDataJob_created:
          target: DeleteCloudDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataJob_submit
        DeleteCloudDataJob_submit:
          target: DeleteCloudDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataJob_submitted
        DeleteCloudDataJob_submitted:
          target: DeleteCloudDataJob
          activities:
            - set_state: submitted
          on_success:
            - RefreshVMToken_start
        RefreshVMToken_start:
          target: RefreshVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshVMToken_started
        RefreshVMToken_started:
          target: RefreshVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: OpenFOAMVM
          activities:
            - delegate: uninstall
          on_success:
            - PublicNet_uninstall
        PublicNet_uninstall:
          target: PublicNet
          activities:
            - delegate: uninstall
    uninstall:
      steps:
        DeleteCloudDataJob_create:
          target: DeleteCloudDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataJob_submit
        DeleteCloudDataJob_submit:
          target: DeleteCloudDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - OpenFOAMJob_delete
        OpenFOAMJob_delete:
          target: OpenFOAMJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - RefreshVMToken_start
        RefreshVMToken_start:
          target: RefreshVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshVMToken_started
        RefreshVMToken_started:
          target: RefreshVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: OpenFOAMVM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNet
          activities:
            - delegate: uninstall
