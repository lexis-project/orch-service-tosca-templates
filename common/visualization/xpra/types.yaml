tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.common.visualization.xpra
  template_version: 0.1.1
  template_author: lexis

description: Xpra types - remote display server and client

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - yorc-types:1.1.0
node_types:
  #
  # Xpra visualization service
  #
  org.lexis.common.visualization.xpra.nodes.Xpra:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      port:
        type: integer
        description: Port to use
        required: true
      ca_pem:
        description: "PEM-encoded certificate authority content, will be generated if not provided"
        type: string
        required: false
      ca_key:
        description: "Certificate authority private key content, will be generated if not provided"
        type: string
        required: false
      ca_passphrase:
        description: "Certificate authority private key passphrase"
        type: string
        required: false
    attributes:
      url: {get_operation_output: [SELF, Standard, start, URL]}
    interfaces:
      Standard:
        create:
          implementation: playbooks/create.yaml
        start:
          inputs:
            USER: {get_secret: ["/secret/dns/mapping/creds", "data=user"]}
            PASS: {get_secret: ["/secret/dns/mapping/creds", "data=password"]}
            REPOSITORY: "https://code.it4i.cz/lexis/wp4/dns.git"
            MAPPING_FILE: "dns_mapping.yaml"
            PORT: { get_property: [SELF, port] }
            CA_PEM: { get_property: [SELF, ca_pem] }
            CA_KEY: { get_property: [SELF, ca_key] }
            CA_PASS: { get_property: [SELF, ca_passphrase] }
            PRIVATE_ADDRESS: { get_attribute: [HOST, private_address] }
            PUBLIC_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: playbooks/start.yaml
        stop:
          implementation: playbooks/stop.yaml
        delete:
          implementation: playbooks/delete.yaml
  #
  # Xpra visualization job - terminates after the specifed walltime
  #
  org.lexis.common.visualization.xpra.nodes.XpraCloudJob:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      port:
        type: integer
        description: Port to use
        required: true
      walltime_minutes:
        type: integer
        description: Duration in minutes of the job execution
        required: true
      ca_pem:
        description: "PEM-encoded certificate authority content, will be generated if not provided"
        type: string
        required: false
      ca_key:
        description: "Certificate authority private key content, will be generated if not provided"
        type: string
        required: false
      ca_passphrase:
        description: "Certificate authority private key passphrase"
        type: string
        required: false
    attributes:
      submit_date_epoch: { get_operation_output: [SELF, tosca.interfaces.node.lifecycle.Runnable, submit, XPRA_SUBMIT_DATE_EPOCH] }
      url: {get_operation_output: [SELF, tosca.interfaces.node.lifecycle.Runnable, submit, URL]}
    interfaces:
      Standard:
        create:
          implementation: playbooks/create.yaml
        delete:
          implementation: playbooks/delete.yaml
      tosca.interfaces.node.lifecycle.Runnable:
        submit:
          inputs:
            USER: {get_secret: ["/secret/dns/mapping/creds", "data=user"]}
            PASS: {get_secret: ["/secret/dns/mapping/creds", "data=password"]}
            REPOSITORY: "https://code.it4i.cz/lexis/wp4/dns.git"
            MAPPING_FILE: "dns_mapping.yaml"
            PORT: { get_property: [SELF, port] }
            CA_PEM: { get_property: [SELF, ca_pem] }
            CA_KEY: { get_property: [SELF, ca_key] }
            CA_PASS: { get_property: [SELF, ca_passphrase] }
            PRIVATE_ADDRESS: { get_attribute: [HOST, private_address] }
            PUBLIC_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: playbooks/submit_xpra.yaml
        run:
          inputs:
            SUBMIT_DATE_EPOCH: {get_attribute: [SELF, submit_date_epoch] }
            WALLTIME: {get_property: [SELF, walltime_minutes] }
          implementation: playbooks/run_xpra.yaml
        cancel:
          implementation: playbooks/cancel_xpra.yaml
