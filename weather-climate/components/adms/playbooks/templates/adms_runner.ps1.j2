#ps1
# ADMS Launcher script
# Executes ADMS simulation
#
# Template values:
#
# ADMS_TYPE:                      Type of ADMS simulation executed, urban or industrial
# ADMS_START_DATE:                Start date of the simulation, format YYYYMMDDHH
# ACCESS_TOKEN:                   OpenID Connect access token
# METEO_DATASET_NAME:             Title of the dataset containing NCL results
# ADMS_URBAN_APP_DATASET:         ID of the dataset containing the ADMSUrban.exe and corresponding files.
#                                 The DDI dataset has to contain single file called adms_urban.zip
# ADMS_URBAN_STATIC_DATASET:      ID of the dataset containing the static data for ADMSUrban
# ADMS_INDUSTRIAL_APP_DATASET:    ID of the dataset containing the ADMSIndustrial.exe and corresponding files.
#                                 The DDI dataset has to contain single file called adms_industrial.zip
# ADMS_INDUSTRIAL_STATIC_DATASET: ID of the dataset containing the static data for ADMSIndustrial
# DATASET_URL:                    REST Endpoint of the DDI dataset API
# DDI_PROJECT_SHORT_NAME:         Short Name of the DDI Project (wp7)


#industrial
# ADMSModel.exe /E2 190513.apl

# Main: apl
# Static: aai, asp
# Dynamic: met, var

#urban
# ADMSUrbanModel.exe /E2 J+0_Zone1.UPL

# Main: upl
# Static: fac, asp, bgd, csv, uai
# Dynamic: bgd, met,

####
# FUNCTIONS
####

# Call DDI and pull the dataset to dataset.zip in current directory
function PullDatasetDDI( $dataset, $token, $dataset_url, $ddi_project_short_name)
{

$header_auth = @{Authorization="Bearer $token"}
$body = @{push_method="directupload";internalID="$dataset";access="project";project="$ddi_project_short_name"} | ConvertTo-Json

try
{
$response = Invoke-RestMethod -ContentType "application/json" -Method Post -Uri "$dataset_url/download" -Headers $header_auth -Body $body -OutFile "dataset_$dataset.zip"
}
catch [System.Net.WebException]
{
"Unable to download dataset:  $_"
exit
}

Expand-Archive  "dataset_$dataset.zip"
"C:\adms\dataset_$dataset\$dataset"
}

# Find dataset ID by supplied name
function FindDatasetByName( $name, $token, $dataset_url)
{
$header_auth = @{Authorization="Bearer $token"}
$body = @{title="$name"} | ConvertTo-Json

try
{
$response = Invoke-RestMethod -ContentType "application/json" -Method Post -Uri "$dataset_url/search/metadata" -Headers $header_auth -Body $body
}
catch [System.Net.WebException]
{
"Unable to find dataset:  $_"
exit
}

if ($response.Length > 1)
{
    echo "Found more than one dataset, using $response[0].location.internalID"
}

$response[0].location.internalID
}

# Expand zips found in path and return directory with the contents
function ExpandZipsInPlace($path)
{
Get-ChildItem -Filter "*.zip" $path | ForEach-Object { Expand-Archive "$path/$_" $path }
Get-ChildItem -Directory $path

}

####
# PARAMETERS
####

# Set vars based on the ADMS type
echo "ADMS Type: {{ADMS_TYPE}}"

{% if ADMS_TYPE == "urban" %}
$app_dataset = "{{ADMS_URBAN_APP_DATASET}}"
$app_bin = "ADMSUrbanModel.exe"
$app_static_dataset = "{{ADMS_URBAN_STATIC_DATASET}}"
$app_suffix = "*.upl"
{% elif ADMS_TYPE == "industrial" %}
$app_dataset = "{{ADMS_INDUSTRIAL_APP_DATASET}}"
$app_bin = "ADMSModel.exe"
$app_static_dataset = "{{ADMS_INDUSTRIAL_STATIC_DATASET}}"
$app_suffix = "*.apl"
{% else %}
echo "Unknown ADMS type, check adms_type value";
{% endif %}

####
# Main script
####

# Install SplitPipeline
Install-Module -Confirm -Name SplitPipeline
Import-Module -Name SplitPipeline

# Create dir for all data
echo "Creating C:\adms"
New-Item -Path C:\adms -ItemType "directory"
Set-Location C:\adms

#Download app
echo "Pulling ADMS app dataset"
$app_dataset_path = PullDatasetDDI $app_dataset "{{ACCESS_TOKEN}}" "{{DATASET_URL}}" "{{DDI_PROJECT_SHORT_NAME}}"
$app_path = $(ExpandZipsInPlace $app_dataset_path)[0].FullName

echo "Copying licence files"
Copy-Item "$app_path\cc-a2" C:\Windows
Copy-Item "$app_path\systme" C:\Windows


# Download the static dataset
echo "Pulling static dataset"
$static_dataset = PullDatasetDDI $app_static_dataset "{{ACCESS_TOKEN}}" "{{DATASET_URL}}" "{{DDI_PROJECT_SHORT_NAME}}"
$static_data_path = $(ExpandZipsInPlace $static_dataset)[0].FullName

{% if ADMS_TYPE == "industrial" %}
$start_date = "{{ADMS_START_DATE}}"
$start_day = $start_date.Substring(0, 8)
echo "Getting industrial var file for $start_day"
$var_files = Get-ChildItem -Filter "$start_day*.var" $static_data_path
echo "Found length " $var_files.Length " for var file for $start_day in $static_data_path"
$var_files| select -first 1 | Rename-Item -NewName "industrial1.var"
{% endif %}


# Download the meteo data
echo "Looking for dataset by name: {{METEO_DATASET_NAME}}"
$meteo_dataset_id = FindDatasetByName "{{METEO_DATASET_NAME}}" "{{ACCESS_TOKEN}}" "{{DATASET_URL}}"
echo "Pulling meteo data set: $meteo_dataset_id"
$meteo_data_path = PullDatasetDDI $meteo_dataset_id "{{ACCESS_TOKEN}}" "{{DATASET_URL}}" "{{DDI_PROJECT_SHORT_NAME}}"
$met_files = Get-ChildItem -Filter "*.met" $meteo_data_path

if ($met_files.Length -eq 0)
{
echo "No MET files found in: $meteo_data_path"
}

echo "Found " $met_files.Length " MET files"

# Copy *.met files to the static dataset dir
echo "Copying .met files to static data dir"
$met_files | Foreach-Object {Copy-Item -Force -Path $_.FullName -Destination $static_data_path}

# Run ADMS for each project file based on suffix
echo "Running ADMS"
Set-Location $static_data_path

$cpu_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
Get-ChildItem $static_data_path -Filter $app_suffix  | Split-Pipeline -Verbose -Count $cpu_count -Variable app_path,app_bin,static_data_path {process{Start-Process -WorkingDirectory "$static_data_path" -Wait -FilePath "$app_path/$app_bin" -ArgumentList "/E2",$_.FullName}}


# Compress the results
Compress-Archive -Path $static_data_path -DestinationPath C:\adms\results.zip

# Cleanup
#Set-Location C:\
#Remove-Item -Force -Recurse C:\adms
