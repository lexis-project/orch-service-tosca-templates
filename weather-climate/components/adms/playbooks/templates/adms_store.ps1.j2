#ps1
# ADMS Launcher script
# Stores ADMS simulation results
#
# Template values:
#
# ADMS_TYPE:                      Type of ADMS simulation executed, urban or industrial
# ADMS_START_DATE:                Start date of the simulation, format YYYYMMDDHH
# ACCESS_TOKEN:                   OpenID Connect access token
# ADMS_RESULT_DATASET_NAME:       Which will be the title of the dataset containing ADMS results
# ADMS_SFTP_SERVER_IP:            IP address of a SPTP server where to store results (can be empty)
# ADMS_SFTP_PORT:                 Port of the SFTP server
# ADMS_SFTP_USER:                 SFTP account used to upload results (can be empty)
# ADMS_SFTP_PASSWORD:             SFTP account password (can be empty)
# ADMS_SFTP_INDUSTRIAL_DIR:       SFTP destination directory for the industrial case
# ADMS_SFTP_URBAN_DIR:            SFTP destination directory for the urban case
# ADMS_IRODS_SERVER:              IRODS server where to upload results
# ADMS_IRODS_ZONE:                IRODS zone where to upload results
# ADMS_IRODS_BROKER_URL:          IRODS broker URL
# ADMS_IRODS_BROKER_KEY:          IRODS broker key
# DATASET_URL:                    REST Endpoint of the DDI dataset API
# DDI_PROJECT_SHORT_NAME:         Short Name of the DDI Project (wp7)

# Result dataset ID
$global:result_dataset_id = ""

####
# FUNCTIONS
####

# Upload results to the DDI
function UploadResults($file, $name, $token, $dataset_url, $ddi_project_short_name)
{
# Encode file
$header_auth = @{Authorization="Bearer $token"}
$file_enc = [Convert]::ToBase64String((Get-Content -Path $file -Encoding Byte))

# Create JSON body
$meta = @{contributor=@("ADMS Workflow");creator=@("ADMS Workflow");owner=@("ADMS Workflow");publicationYear="2021";publisher=@("ADMS Workflow");resourceType="Workflow result";title="$name"}
$body = @{push_method="directupload";name="adms_run_result.zip";access="project";project="$ddi_project_short_name";metadata=$meta;file="$file_enc"} | ConvertTo-Json

# Upload
try
{
    $response = Invoke-RestMethod -ContentType "application/json" -Method Post -Uri "$dataset_url" -Headers $header_auth -Body $body
}
catch [System.Net.WebException]
{
    "Unable to upload dataset:  $_"
    exit
}
$response
$global:result_dataset_id = ($response | where { $_.status -eq "201" }).internalID
echo "Result dataset ID: $global:result_dataset_id"
}

# JWT Token parser
function ConvertFrom-Jwt {
    [cmdletbinding()]
    param(
    [Parameter(Mandatory = $true)]
    [string]$Token
    )

    # Validate as per https://tools.ietf.org/html/rfc7519
    # Access and ID tokens are fine, Refresh tokens will not work
    if (!$Token.Contains('.') -or !$Token.StartsWith('eyJ')) { Write-Error 'Invalid token' -ErrorAction Stop }

    # Extract header and payload
    $tokenheader, $tokenPayload = $Token.Split('.').Replace('-', '+').Replace('_', '/')[0..1]

    # Fix padding as needed, keep adding '=' until string length modulus 4 reaches 0
    while ($tokenheader.Length % 4) { Write-Debug 'Invalid length for a Base-64 char array or string, adding ='; $tokenheader += '=' }
    while ($tokenPayload.Length % 4) { Write-Debug 'Invalid length for a Base-64 char array or string, adding ='; $tokenPayload += '=' }

    # Convert header from Base64 encoded string to PSObject all at once
    $header = [System.Text.Encoding]::ASCII.GetString([system.convert]::FromBase64String($tokenheader)) | ConvertFrom-Json

    # Convert payload to string array
    $tokenArray = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($tokenPayload))

    # Convert from JSON to PSObject
    $tokobj = $tokenArray | ConvertFrom-Json

    return $tokobj
}

# Upload to iRODS directly
function UploadResultsiRODS($file, $name, $token, $dataset_url, $ddi_project_short_name)
{
    echo "Creating empty dataset in DDI"
    # Create empty dataset
    $header_auth = @{Authorization="Bearer $token"}

    # Create JSON body
    $meta = @{contributor=@("ADMS Workflow");creator=@("ADMS Workflow");owner=@("ADMS Workflow");publicationYear="2021";publisher=@("ADMS Workflow");resourceType="Workflow result";title="$name"}
    $body = @{push_method="empty";access="project";project="$ddi_project_short_name";metadata=$meta} | ConvertTo-Json

    # Call DDI api
    try
    {
        $response = Invoke-RestMethod -ContentType "application/json" -Method Post -Uri "$dataset_url" -Headers $header_auth -Body $body
    }
    catch [System.Net.WebException]
    {
        "Unable to upload dataset:  $_"
        exit
    }
    $response
    $global:result_dataset_id = ($response | where { $_.status -eq "201" }).internalID
    echo "Result dataset ID: $global:result_dataset_id"

    # Parameters for Python script
    echo "Running Python upload to iRODS"
    $irods_file_name = (Get-ChildItem C:\adms\results.zip).Name
    $user_name = (ConvertFrom-Jwt $token).preferred_username

    $irods_server = '{{ADMS_IRODS_SERVER}}'
    $irods_zone = '{{ADMS_IRODS_ZONE}}'

    $md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider
    $utf8 = New-Object -TypeName System.Text.UTF8Encoding
    $project_hash = [System.BitConverter]::ToString($md5.ComputeHash($utf8.GetBytes($ddi_project_short_name))).Replace("-","").ToLower()

    $python_script=@"

from irods.session import iRODSSession
import requests

r = requests.get('{{ADMS_IRODS_BROKER_URL}}' + '/validate_token',
    headers={'Authorization': 'Basic {{ADMS_IRODS_BROKER_KEY}}'},
    params={'access_token': '$token','provider':'keycloak_openid'}, verify=True)

print(r.text)
if r.status_code != 200:
    print("Invalid token.")
    exit(1)

session = iRODSSession(host='$irods_server',
port=1247, authentication_scheme='openid',
openid_provider='keycloak_openid',
zone='$irods_zone',
access_token='$token',
user='$user_name',
block_on_authURL=False)

session.data_objects.put('C:/adms/results.zip', '/$irods_zone/project/proj$project_hash/$global:result_dataset_id/$irods_file_name')
"@

    $python_script | Out-File -FilePath ./irods_transfer.py -Encoding utf8
    $python_result = Start-Process -PassThru -Wait -RedirectStandardError 'irods_err.log' -RedirectStandardOutput 'irods_out.log' -FilePath "C:\Program Files\Python39\python.exe" -ArgumentList "./irods_transfer.py"
    if ($python_result.ExitCode -ne 0)
    {
        echo "iRODS upload ERROR"
        echo (Get-Content 'irods_out.log')
        echo (Get-Content 'irods_err.log')
    }
    else
    {
        echo "iRODS upload SUCCESS"
    }
}



####
# PARAMETERS
####

# Set vars based on the ADMS type
echo "ADMS Type: {{ADMS_TYPE}}"

{% if ADMS_TYPE == "urban" %}
$sftp_dest_dir = "{{ADMS_SFTP_URBAN_DIR}}"
{% elif ADMS_TYPE == "industrial" %}
$sftp_dest_dir = "{{ADMS_SFTP_INDUSTRIAL_DIR}}"
{% else %}
echo "Unknown ADMS type, check adms_type value";
{% endif %}

####
# Main script
####

Set-Location C:\adms

# Upload them
#UploadResults C:\adms\results.zip "{{ADMS_RESULT_DATASET_NAME}}" "{{ACCESS_TOKEN}}" "{{DATASET_URL}}" "{{DDI_PROJECT_SHORT_NAME}}"
UploadResultsiRODS C:\adms\results.zip "{{ADMS_RESULT_DATASET_NAME}}" "{{ACCESS_TOKEN}}" "{{DATASET_URL}}" "{{DDI_PROJECT_SHORT_NAME}}"

{% if ADMS_SFTP_SERVER_IP != "" %}
# Rename result file before storing it to the SFTP server
$file_ext = ".zip"
$newfilename = "result-dataset-{{ADMS_START_DATE}}-$global:result_dataset_id$file_ext"
echo "Renaming results file as: " $newfilename
Rename-Item -Path "C:\adms\results.zip" -NewName "$newfilename"

echo "Installing Posh-SSH module"
Install-Module Posh-SSH -Confirm:$False -force

$Password = ConvertTo-SecureString "{{ADMS_SFTP_PASSWORD}}" -AsPlainText -Force

$Credential = New-Object System.Management.Automation.PSCredential ("{{ADMS_SFTP_USER}}", $Password)

# Set local file path, SFTP path, and the backup location path.
$FilePath = Get-ChildItem -Path "C:\adms\" -Filter result-dataset*.zip | Select-Object -ExpandProperty FullName

$SftpIp = "{{ADMS_SFTP_SERVER_IP}}"

$portConfigValue = "{{ADMS_SFTP_PORT}}"
$sftpPort = [int]$portConfigValue

# Establish the SFTP connection
echo "Establishing SFTP connection..."
$ThisSession = New-SFTPSession -ComputerName $SftpIp -Port $sftpPort -Credential $Credential -AcceptKey -Force

# Upload the file to the SFTP path
echo "Results to upload: " $FilePath
echo "Destination directory: " $sftp_dest_dir
echo "Uploading results to SFTP server: " $SftpIp
echo "SFTP port: " $sftpPort
Set-SFTPItem -SessionId ($ThisSession).SessionId -Destination $sftp_dest_dir -Path $FilePath -Force

#Disconnect all SFTP Sessions
#echo "Disconnecting SFTP connection"
#Get-SFTPSession | % { Remove-SFTPSession -SessionId ($_.SessionId) }

{% endif %}


# Cleanup
#Set-Location C:\
#Remove-Item -Force -Recurse C:\adms
