tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.wp7.ADMSTemplate
  template_version: 0.1.0-SNAPSHOT
  template_author: lexis

description: ADMS template

imports:
  - yorc-types:1.1.0
  - yorc-openstack-types:3.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - docker-types:3.0.0
  - alien-base-types:3.0.0
  - org.lexis.common.ddi-types:1.0.1
  - org.lexis.common.heappe-types:1.0.6
  - org.lexis.common.dynamic-orchestration-types:1.0.1
  - org.ystia.docker.containers.docker.generic:3.0.0-SNAPSHOT
  - org.ystia.docker.ansible:3.0.0-SNAPSHOT
  - org.lexis.common.datatransfer:0.1.2-SNAPSHOT
  - org.lexis.wp7.wps:0.1.1-SNAPSHOT
  - org.lexis.wp7.adms:0.1.0
  - org.lexis.wp7.dewetra:0.1.0

topology_template:
  inputs:
    token:
      type: string
      required: true
      description: "OpenID Connect token"
    project_id:
      type: string
      description: "LEXIS project identifier"
      required: true
    preprocessing_start_date:
      type: string
      description: Start date of the simulation, format YYYYMMDDHH
      required: true
    computation_dataset_radar_observations_data_path:
      type: string
      description: Dataset containing radar observations data over France for the selected date
      required: true
    postprocessing_adms_type:
      type: string
      description: type of ADMS simulation executed, urban or industrial
      required: true
    postprocessing_adms_latitude:
      type: string
      description: latitude (example 47.31322)
      required: true
    postprocessing_adms_longitude:
      type: string
      description: longitude (example -2.063825)
      required: true
    postprocessing_adms_sftp_server_ip:
        type: string
        description: IP address of a SPTP server where to store results (default, no sftp server upload)
        required: false
        default: ""
    postprocessing_adms_sftp_port:
        type: integer
        description: Port of the SFTP server
        required: false
        default: 22
    postprocessing_dewetra_sftp_server_ip:
        type: string
        description: IP address of a Dewetra SPTP server where to store results (default, no sftp server upload)
        required: false
        default: ""
    postprocessing_project_short_name:
      type: string
      description: "DDI project short name"
      default: "wp7"
      required: false
    preprocessing_docker_image_ifs:
      type: string
      description: Pre-processing container repository path
      default: "cimafoundation/wps-da.ifs:v2.0.3"
      required: false
    preprocessing_docker_image_observation_data:
      type: string
      description: Repository path of container downloading observation data
      default: "cimafoundation/lexis-download-docker:v1.2.1"
      required: false
    preprocessing_dataset_geographical_data_path:
      type: string
      description: Dataset containing geographical data
      default: project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c/055b25ea-ba60-11eb-a44e-0050568fc9b5/static_geog_data.tar.gz
      required: false
    preprocessing_decrypt_dataset_geographical_data:
      type: boolean
      description: Should the input dataset be decrypted
      default: false
      required: false
    preprocessing_uncompress_dataset_geographical_data:
      type: boolean
      description: Should the input dataset be uncompressed
      default: true
      required: false
    preprocessing_wps_mode:
      type: string
      description: WPS mode, WRF or WRFDA if data assimilation is needed
      required: false
      default: WRFDA
    preprocessing_volumes:
      type: list
      entry_schema:
        type: string
      description: |
        List of volumes to mount within the pre-processing container.
        Use docker CLI-style syntax: /host:/container[:mode]
      default: ["/wps_data/ifs:/input", "/wps_data/output/inputs:/output", "/mnt/cloud_staging_area/adms:/geogrid"]
      required: false
    preprocessing_observation_data_volumes:
      type: list
      entry_schema:
        type: string
      description: |
        List of volumes to mount within the post-processing container downloading observation data.
        Use docker CLI-style syntax: /host:/container[:mode]
      default: ["/wps_data/observations:/output"]
      required: false
    computation_decrypt_dataset_radar_observations_data:
      type: boolean
      description: Should the radar observations data dataset be decrypted
      default: false
      required: false
    computation_uncompress_dataset_radar_observations_data:
      type: boolean
      description: Should the radar observations data dataset be uncompressed
      default: true
      required: false
    postprocessing_adms_sftp_industrial_dir:
        type: string
        description: SFTP destination directory for the industrial case
        required: false
        default: "/adms5"
    postprocessing_adms_sftp_urban_dir:
        type: string
        description: SFTP destination directory for the urban case
        required: false
        default: "/admsurban"
    postprocessing_title_dataset_MET_results:
      type: string
      description: Title of the MET processing results dataset to create in DDI (will be suffixed by the start data)
      default: MET processing results
      required: false
    postprocessing_title_dataset_adms_result:
      type: string
      description: Which will be the title of the dataset containing ADMS results (will be suffixed by the start data)
      default: ADMS results
      required: false
    postprocessing_docker_image:
      type: string
      description: Post-processing docker image name:tag
      default: "adms/ncl:1.0.1"
      required: false
    postprocessing_dataset_docker_image_path:
      type: string
      description: Post-processing docker image tar archive path in DDI
      # TODO: replicate the dataset on IT4I
      default: "project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c/263a6916-f506-11eb-8bc2-0050568fc9b5"
      required: false
    postprocessing_dataset_ncl_script:
      type: string
      description: Post-processing NCL script path in DDI
      # TODO: replicate the dataset on IT4I
      default: "project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c/6fb84668-f50a-11eb-8bc2-0050568fc9b5"
      required: false
    postprocessing_ddi_project_path:
      type: string
      description: Path of the project where to transfer the post-processing results in DDI
      default: "project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c"
      required: false
    postprocessing_dataset_id_adms_urban_app:
      type: string
      description: ID of the dataset containing the ADMSUrban.exe and corresponding files. The DDI dataset has to contain single file called adms_urban.zip
      default: "f284db6c-2588-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_urban_static_data:
      type: string
      description: ID of the dataset containing the static data for ADMSUrban
      default: "f1275722-25b5-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_industrial_app:
      type: string
      description: ID of the dataset containing the ADMSIndustrial.exe and corresponding files. The DDI dataset has to contain single file called adms_industrial.zip
      default: "ab773490-544a-11eb-b72c-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_industrial_static_data:
      type: string
      description: ID of the dataset containing the static data for ADMSIndustrial
      default: "b6e09a96-25ac-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_encrypt_wrf_dataset_result:
      type: boolean
      description: Encrypt the WRF result dataset
      default: false
      required: false
    postprocessing_compress_wrf_dataset_result:
      type: boolean
      description: Compress the WRF result dataset
      default: true
      required: false
  node_templates:
    # Validation of the token provided in input
    # Exchanging this token to have an access and refresh tokens
    # for any component needing it in the workflow
    ValidateExchangeToken:
      type: org.lexis.common.dynamic.orchestration.nodes.ValidateAndExchangeToken
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }

    # Job gathering info on the input dataset:
    # - on which locations it is available
    # - size
    # - number of files
    # to take placement decisions on computing resources using this dataset
    InputDatasetInfoJob:
      type: org.lexis.common.ddi.nodes.GetDDIDatasetInfoJob
      properties:
        token: {get_input: token}
        dataset_path: {get_input: preprocessing_dataset_geographical_data_path}
    # Find the best cloud location depending on the input dataset and needed cloud resources
    FindCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: InputDatasetInfoJob
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - CloudResourceVM:
            type_requirement: cloud_instance
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
    # Floating IP address network
    PublicNetADMSVM:
      type: yorc.nodes.openstack.FloatingIP
    ADMS_VM:
      type: tosca.nodes.Compute
      requirements:
        - networkPublicNetConnection:
            type_requirement: network
            node: PublicNetADMSVM
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            num_cpus: 10
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    # At the end of the workflow, the Cloud instance token should be refreshed
    # before attempting to uninstall the compute instance
    RefreshADMSVMToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMS_VM
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    GetDDIAccess:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    DDIToCloudGEOGDatasetJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: { get_input: token }
        decrypt: {get_input: preprocessing_decrypt_dataset_geographical_data}
        uncompress: {get_input: preprocessing_uncompress_dataset_geographical_data}
        ddi_dataset_path: { get_input: preprocessing_dataset_geographical_data_path }
        cloud_staging_area_directory_path: "adms_preprocessing_geog"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    MountGEOGDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/adms"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudGEOGDatasetJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    CreatePreProcessDirs:
      type: org.lexis.common.datatransfer.nodes.CreateDirectories
      properties:
        directories: ["/wps_data/ifs", "/wps_data/output/inputs", "/wps_data/output/observations"]
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    Docker:
      type: org.ystia.docker.ansible.nodes.Docker
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    WPS_IFS:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: preprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: false
        docker_run_cmd: "bash common-start.sh"
        image: {get_input: preprocessing_docker_image_ifs}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        shm_size: "64 GB"
        volumes: {get_input: preprocessing_volumes}
        docker_env_vars:  {concat: ["{\"WPS_START_DATE\": \"", get_input: preprocessing_start_date, "\", \"WPS_END_DATE\": \"", get_input: preprocessing_start_date, "\", \"WPS_MODE\": \"", get_input: preprocessing_wps_mode, "\"}"]}
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime

    # Get ECMWF data
    ECMWFData:
      type: org.lexis.wp7.nodes.ECMWFData
      properties:
        start_date: {get_input: preprocessing_start_date}
        output_directory: "/wps_data/ifs"
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn

    # Download observation data needed by ADMS 
    ObservationsData:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      properties:
        auto_remove: false
        cleanup: false
        detach: false
        image: {get_input: preprocessing_docker_image_observation_data}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        shm_size: "64 GB"
        volumes: {get_input: preprocessing_observation_data_volumes}
        docker_env_vars:  {concat: ["{\"START_DATE\": \"", get_input: preprocessing_start_date, "\", \"DOWNLOAD_TYPE\": \"ADMS\", \"WEBDROPS_USER\": \"", get_secret: ["/secret/wp7/webdrops/creds", "data=user"], "\", \"WEBDROPS_PWD\": \"", get_secret: ["/secret/wp7/webdrops/creds", "data=password"], "\"}"]}
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    # Move results to match WRF inputs structure expectations
    MoveObservationData:
      type: org.lexis.common.datatransfer.nodes.MoveFile
      properties:
        source_file:  "/wps_data/observations/*/*"
        destination: "/wps_data/output/observations"
        as_user: "root"
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn

    # Get pre-processing results details (size, number of files)
    GetPreprocessDatasetInfo:
      type: org.lexis.common.ddi.nodes.GetComputeInstanceDatasetInfo
      properties:
        dataset_path: "/wps_data/output"
      requirements:
        - host:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Find the best HPC location depending on the input dataset and needed HPC resources
    FindHPCLocationsJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: GetPreprocessDatasetInfo
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - HPCResourceWRFJob:
            type_requirement: heappe_job
            node: WRF
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.dynamic.orchestration.relationships.HeappeJob
    WRF:
      type: org.lexis.common.heappe.nodes.Job
      metadata:
        task: computation
      properties:
        token: { get_input: token }
        JobSpecification:
          Name: WRFJob
          Project: "MyProject"
          ClusterId: 2
          Tasks:
            - Name: WRF Generic
              ClusterNodeTypeId: 7
              CommandTemplateId: 9
              WalltimeLimit: 36000
              MinCores: 144
              MaxCores: 144
              Priority: 4
              StandardOutputFile: "stdout"
              StandardErrorFile: "stderr"
              ProgressFile: "stdprog"
              LogFile: "stdlog"
    # Create a directory in staging area for WRF inputs
    CreateStagingAreaWRFInputDir:
      type: org.lexis.common.datatransfer.nodes.CreateStagingAreaDirectory
      properties:
        directory: "adms_wrf_inputs"
      requirements:
        - mountedCloudStagingArea:
            type_requirement: mounted_staging_area
            node: MountGEOGDataset
            capability: org.lexis.common.ddi.capabilities.MountedStagingAreaAccess
            relationship: org.lexis.common.datatransfer.relationships.MountedCloudStagingArea
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    StageWRFInputs:
      type: org.lexis.common.datatransfer.nodes.CopyToStagingAreaDirectory
      properties:
        source_directory: "/wps_data/output/"
      requirements:
        - staging_area_directory:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaWRFInputDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Transfer these inputs to WRF
    CloudToHPCTaskJob:
      type: org.lexis.common.ddi.nodes.CloudToHPCJob
      properties:
        token: { get_input: token }
        task_name: "WRF Generic"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaWRFInputDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - job:
            type_requirement: job
            node: WRF
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.SendInputsToJob
    # Transfer the DDI observations input dataset to the job task input directory
    DDIToHPCTaskJob:
      type: org.lexis.common.ddi.nodes.DDIToHPCTaskJob
      properties:
        token: { get_input: token }
        decrypt: {get_input: computation_decrypt_dataset_radar_observations_data}
        uncompress: {get_input: computation_uncompress_dataset_radar_observations_data}
        ddi_dataset_path: { get_input: computation_dataset_radar_observations_data_path }
        task_name: "WRF Generic"
      requirements:
        - job:
            type_requirement: job
            node: WRF
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.heappe.relationships.SendInputsToJob
    HPCToCloudWRFJob:
      type: org.lexis.common.ddi.nodes.HPCToCloudJob
      properties:
        token: { get_input: token }
        task_name: "WRF Generic"
        source_subdirectory: "results"
        cloud_staging_area_directory_path: "adms_wrf_results"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
        - job:
            type_requirement: job
            node: WRF
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    MountWRFDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/wrf_results"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: HPCToCloudWRFJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    CreateWRFDir:
      type: org.lexis.common.datatransfer.nodes.CreateDirectories
      properties:
        directories: ["/mnt/cloud_staging_area/adms/adms_data/DATA-WRF"]
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Move only the WRF auxhist results needed by post-processing
    MoveWRFAuxhistResults:
      type: org.lexis.common.datatransfer.nodes.MoveFile
      properties:
        source_file:  "/mnt/cloud_staging_area/wrf_results/*/aux/*/auxhist*"
        destination: "/mnt/cloud_staging_area/adms/adms_data/DATA-WRF/"
        as_user: "root"
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Move the WRF lexis result to be uploaded to dewetra
    MoveWRFLexisResult:
      type: org.lexis.common.datatransfer.nodes.MoveFile
      properties:
        source_file:  "/mnt/cloud_staging_area/wrf_results/*/dewetra/lexis*"
        destination: "/mnt/cloud_staging_area/adms/adms_data/DATA-WRF/"
        as_user: "root"
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    DDIToCloudDockerImageJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: { get_input: token }
        ddi_dataset_path: { get_input: postprocessing_dataset_docker_image_path }
        cloud_staging_area_directory_path: "adms_postprocessing_image"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    MountDockerImageDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/docker_image"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudDockerImageJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    FindArchive:
      type: org.lexis.common.datatransfer.nodes.FindDockerImageArchiveInStagingAreaDirectory
      properties:
        shell_patterns: ["*.tar*", "*.tgz"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountDockerImageDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    ImageLoader:
      type: org.ystia.docker.images.RuntimePathArchiveLoader
      properties:
        name: { get_input: postprocessing_docker_image }
        force_load: true
      requirements:
        - archive_provider:
            type_requirement: archive_provider
            node: FindArchive
            capability: org.ystia.docker.images.capabilities.ArchiveProvider
            relationship: org.ystia.docker.images.relationships.ArchiveProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    DDIToCloudNCLScriptJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: { get_input: token }
        ddi_dataset_path: { get_input: postprocessing_dataset_ncl_script }
        cloud_staging_area_directory_path: "adms_postprocessing_ncl"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    MountNCLScriptDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/ncl_script"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudNCLScriptJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    FindNCLScript:
      type: org.lexis.common.datatransfer.nodes.FindFileInStagingAreaDirectory
      properties:
        shell_patterns: ["mkMET-*.ncl"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountNCLScriptDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    CopyNCLScriptFromStagingArea:
      type: org.lexis.common.datatransfer.nodes.CopyFromStagingArea
      properties:
        destination_directory: "/mnt/cloud_staging_area/adms/adms_data"
      requirements:
        - file_provider:
            type_requirement: file_provider
            node: FindNCLScript
            capability: org.lexis.common.datatransfer.capabilities.FileProvider
            relationship: org.lexis.common.datatransfer.relationships.FileProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    WRFToMet:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: postprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: false
        image: {get_input: postprocessing_docker_image}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        volumes: ["/mnt/cloud_staging_area/adms/adms_data/:/wrfdata"]
        docker_env_vars:  {concat: ["{\"TYPOUT\": \"", get_input: postprocessing_adms_type, "\", \"LAT\": \"", get_input: postprocessing_adms_latitude, "\", \"LON\": \"", get_input: postprocessing_adms_longitude, "\"}"]}
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    CreateStagingAreaResultDir:
      type: org.lexis.common.datatransfer.nodes.CreateStagingAreaDirectory
      properties:
        directory: "adms_results"
      requirements:
        - mountedCloudStagingArea:
            type_requirement: mounted_staging_area
            node: MountGEOGDataset
            capability: org.lexis.common.ddi.capabilities.MountedStagingAreaAccess
            relationship: org.lexis.common.datatransfer.relationships.MountedCloudStagingArea
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    StageMETResults:
      type: org.lexis.common.datatransfer.nodes.CopyFilesToStagingAreaDirectory
      properties:
        source_directory: "/mnt/cloud_staging_area/adms/adms_data/DATA-WRF/"
        source_files: [ "*.met" ]
        destination_subdirectory: "met"
      requirements:
        - staging_area_directory:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaResultDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Transfer HEAppE WRF job results to DDI
    HPCToDDIJob:
      type: org.lexis.common.ddi.nodes.HPCToDDIJob
      metadata:
        task: preprocessing
      properties:
        token: { get_input: token }
        encrypt: {get_input: postprocessing_encrypt_wrf_dataset_result}
        compress: {get_input: postprocessing_compress_wrf_dataset_result}
        metadata: {concat: ["{\"creator\": [\"ADMS workflow\"], \"contributor\": [\"ADMS workflow\"], \"publisher\": [\"ADMS workflow\"], \"resourceType\": \"Dataset\", \"title\": \"ADMS Workflow WRF result - ", get_input: preprocessing_start_date, "\"}"]}
        ddi_path: { get_input: postprocessing_ddi_project_path }
        task_name: "WRF Generic"
        source_subdirectory: "results"
      requirements:
        - job:
            type_requirement: job
            node: WRF
            capability: org.lexis.common.heappe.capabilities.HeappeJob
            relationship: org.lexis.common.ddi.relationships.SendJobOutputs
    METResultsToDDIJob:
      type: org.lexis.common.ddi.nodes.CloudToDDIJob
      properties:
        metadata: {concat: ["{\"creator\": [\"ADMS workflow\"], \"contributor\": [\"ADMS workflow\"], \"publisher\": [\"ADMS workflow\"], \"resourceType\": \"Dataset\", \"title\": \"", get_input: postprocessing_title_dataset_MET_results, " - ", get_input: preprocessing_start_date,"\"}"]}
        token: { get_input: token }
        ddi_path: { get_input: postprocessing_ddi_project_path }
        source_subdirectory: "met"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaResultDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
    DeleteCloudDataImageJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudDockerImageJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudDataNCLScriptJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudNCLScriptJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudWRFDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: HPCToCloudWRFJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudGEOGDataJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudGEOGDatasetJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    # Get post-processing results details (size, number of files)
    GetPostprocessDatasetInfo:
      type: org.lexis.common.ddi.nodes.GetComputeInstanceDatasetInfo
      properties:
        dataset_path: "/mnt/cloud_staging_area/adms/adms_results/met"
      requirements:
        - host:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Find the best cloud location depending on the input dataset and needed cloud resources
    FindWindowsCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: GetPostprocessDatasetInfo
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - CloudResourceWinVM:
            type_requirement: cloud_instance
            node: ADMS_WIN_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
    PublicNetADMSWinVM:
      type: yorc.nodes.openstack.FloatingIP
    ADMS_WIN_VM:
      type: tosca.nodes.Compute
      requirements:
        - networkNetworkConnection:
            type_requirement: network
            node: PublicNetADMSWinVM
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
        os:
          properties:
            type: "windows"
    # At the end of the workflow, the Cloud instance token should be refreshed
    # before attempting to uninstall the compute instance
    RefreshADMSWinVMToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMS_WIN_VM
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    GetDDIAccessWinVM:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ADMS_WIN_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    RefreshADMSRunToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMSRun
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    ADMSRun:
      type: org.lexis.wp7.nodes.ADMSRun
      properties:
        adms_type: { get_input: postprocessing_adms_type }
        dataset_title_ncl_result: { concat: [get_input: postprocessing_title_dataset_MET_results, " - ", get_input: preprocessing_start_date ] }
        dataset_id_adms_urban_app: { get_input: postprocessing_dataset_id_adms_urban_app }
        dataset_id_adms_urban_static_data: { get_input: postprocessing_dataset_id_adms_urban_static_data }
        dataset_id_adms_industrial_app: { get_input: postprocessing_dataset_id_adms_industrial_app }
        dataset_id_adms_industrial_static_data: { get_input: postprocessing_dataset_id_adms_industrial_static_data }
        ddi_project_short_name: { get_input: postprocessing_project_short_name }
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccessWinVM
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - hostedOnAdmsVmHost:
            type_requirement: host
            node: ADMS_WIN_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    RefreshADMSStoreToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMSStore
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    ADMSStore:
      type: org.lexis.wp7.nodes.ADMSStore
      properties:
        adms_type: { get_input: postprocessing_adms_type }
        dataset_title_adms_result: { concat: [get_input: postprocessing_title_dataset_adms_result, " - ", get_input: preprocessing_start_date ] }
        adms_sftp_server_ip: { get_input: postprocessing_adms_sftp_server_ip }
        adms_sftp_port: { get_input: postprocessing_adms_sftp_port }
        adms_sftp_industrial_dir: { get_input: postprocessing_adms_sftp_industrial_dir }
        adms_sftp_urban_dir: { get_input: postprocessing_adms_sftp_urban_dir }
        ddi_project_short_name: { get_input: postprocessing_project_short_name }
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccessWinVM
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - hostedOnAdmsVmHost:
            type_requirement: host
            node: ADMS_WIN_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    DewetraUpload:
      type: org.lexis.wp7.nodes.DewetraUpload
      properties:
        start_date: { get_input: preprocessing_start_date }
        computation_type: ADMS
        wrf_results_dir: "/mnt/cloud_staging_area/adms/adms_data/DATA-WRF"
        sftp_server_ip: { get_input: postprocessing_dewetra_sftp_server_ip }
      requirements:
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
  outputs:
    computation_dataset_wrf_results_path:
      description: DDI path to ADMS WRF results
      value: { get_attribute: [ HPCToDDIJob, destination_path ] }
    postprocessing_dataset_met_result_path:
      description: DDI path to ADMS MET results
      value: { get_attribute: [ METResultsToDDIJob, destination_path ] }
    postprocessing_dataset_adms_result_id:
      description: ID of the dataset where ADMS post-process results are stored
      value: { get_attribute: [ ADMSStore, dataset_id_result ] }
  workflows:
    # At deployment time, validating the input token and exchanging it
    # to get an access/refresh token for the orchestrator
    install:
      steps:
        ValidateExchangeToken_start:
          target: ValidateExchangeToken
          activities:
            - call_operation: Standard.start
          on_success:
            - ValidateExchangeToken_started
        ValidateExchangeToken_started:
          target: ValidateExchangeToken
          activities:
            - set_state: started
    uninstall:
      steps:
        DeleteCloudGEOGDataJob_create:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudGEOGDataJob_submit
        DeleteCloudGEOGDataJob_submit:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
           - DeleteCloudWRFDataJob_create
        DeleteCloudWRFDataJob_create:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudWRFDataJob_submit
        DeleteCloudWRFDataJob_submit:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataImageJob_create
        DeleteCloudDataImageJob_create:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataImageJob_submit
        DeleteCloudDataImageJob_submit:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataNCLScriptJob_create
        DeleteCloudDataNCLScriptJob_create:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataNCLScriptJob_submit
        DeleteCloudDataNCLScriptJob_submit:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - WRF_delete
        WRF_delete:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - RefreshADMSVMToken_start
        RefreshADMSVMToken_start:
          target: RefreshADMSVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSVMToken_started
        RefreshADMSVMToken_started:
          target: RefreshADMSVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ADMS_VM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNetADMSVM
          activities:
            - delegate: uninstall
          on_success:
            - RefreshADMSWinVMToken_start
        RefreshADMSWinVMToken_start:
          target: RefreshADMSWinVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSWinVMToken_started
        RefreshADMSWinVMToken_started:
          target: RefreshADMSWinVMToken
          activities:
            - set_state: started
          on_success:
            - WindowsCompute_uninstall
        WindowsCompute_uninstall:
          target: ADMS_WIN_VM
          activities:
            - delegate: uninstall
          on_success:
            - WindowsNetwork_uninstall
        WindowsNetwork_uninstall:
          target: PublicNetADMSWinVM
          activities:
            - delegate: uninstall
    Run:
      steps:
        # Submit DDI job to get info on dataset (DDI location where it is available, size...)
        InputDatasetInfoJob_submit:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - InputDatasetInfoJob_run
        InputDatasetInfoJob_run:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - InputDatasetInfoJob_executed
        InputDatasetInfoJob_executed:
          target: InputDatasetInfoJob
          activities:
            - set_state: executed
          on_success:
            - FindCloudLocationJob_submit
        # Submit the computation to find the best location from these inputs
        FindCloudLocationJob_submit:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindCloudLocationJob_run
        FindCloudLocationJob_run:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindCloudLocationJob_executed
        FindCloudLocationJob_executed:
          target: FindCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - DDIToCloudGEOGDatasetJob_create
            - Network_install
        # Get a floating IP address for the Cloud Compute instance
        Network_install:
          target: PublicNetADMSVM
          activities:
            - delegate: install
          on_success:
            - Compute_install
        Compute_install:
          target: ADMS_VM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccess_start
            - CreatePreProcessDirs_start
        GetDDIAccess_start:
          target: GetDDIAccess
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccess_started
        GetDDIAccess_started:
          target: GetDDIAccess
          activities:
            - set_state: started
          on_success:
            - MountGEOGDataset_create
        DDIToCloudGEOGDatasetJob_create:
          target: DDIToCloudGEOGDatasetJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudGEOGDatasetJob_submit
        DDIToCloudGEOGDatasetJob_submit:
          target: DDIToCloudGEOGDatasetJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudGEOGDatasetJob_submitted
        DDIToCloudGEOGDatasetJob_submitted:
          target: DDIToCloudGEOGDatasetJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudGEOGDatasetJob_run
        DDIToCloudGEOGDatasetJob_run:
          target: DDIToCloudGEOGDatasetJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudGEOGDatasetJob_executed
        DDIToCloudGEOGDatasetJob_executed:
          target: DDIToCloudGEOGDatasetJob
          activities:
            - set_state: executed
          on_success:
            - MountGEOGDataset_create
        MountGEOGDataset_create:
          target: MountGEOGDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountGEOGDataset_created
        MountGEOGDataset_created:
          target: MountGEOGDataset
          activities:
            - set_state: created
          on_success:
            - MountGEOGDataset_refresh_token
        MountGEOGDataset_refresh_token:
          target: MountGEOGDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountGEOGDataset_start
        MountGEOGDataset_start:
          target: MountGEOGDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountGEOGDataset_started
        MountGEOGDataset_started:
          target: MountGEOGDataset
          activities:
            - set_state: started
          on_success:
            - WPS_IFS_start
        CreatePreProcessDirs_start:
          target: CreatePreProcessDirs
          activities:
            - call_operation: Standard.start
          on_success:
            - CreatePreProcessDirs_started
        CreatePreProcessDirs_started:
          target: CreatePreProcessDirs
          activities:
            - set_state: started
          on_success:
            - ECMWFData_create
        ECMWFData_create:
          target: ECMWFData
          activities:
            - call_operation: Standard.create
          on_success:
            - ECMWFData_start
            - Docker_create
        ECMWFData_start:
          target: ECMWFData
          activities:
            - call_operation: Standard.start
          on_success:
            - ECMWFData_started
        ECMWFData_started:
          target: ECMWFData
          activities:
            - set_state: started
          on_success:
            - WPS_IFS_start
        Docker_create:
          target: Docker
          activities:
            - call_operation: Standard.create
          on_success:
            - Docker_configure
        Docker_configure:
          target: Docker
          activities:
            - call_operation: Standard.configure
          on_success:
            - Docker_start
        Docker_start:
          target: Docker
          activities:
            - call_operation: Standard.start
          on_success:
            - Docker_started
        Docker_started:
          target: Docker
          activities:
            - set_state: started
          on_success:
            - WPS_IFS_create
        WPS_IFS_create:
          target: WPS_IFS
          activities:
            - call_operation: Standard.create
          on_success:
            - WPS_IFS_start
            - ObservationsData_create
        WPS_IFS_start:
          target: WPS_IFS
          activities:
            - call_operation: Standard.start
          on_success:
            - WPS_IFS_started
        WPS_IFS_started:
          target: WPS_IFS
          activities:
            - set_state: started
          on_success:
            - WPS_IFS_delete
        WPS_IFS_delete:
          target: WPS_IFS
          activities:
            - call_operation: Standard.delete
          on_success:
            - WPS_IFS_deleted
        WPS_IFS_deleted:
          target: WPS_IFS
          activities:
            - set_state: deleted
          on_success:
            - GetPreprocessDatasetInfo_create
        ObservationsData_create:
          target: ObservationsData
          activities:
            - call_operation: Standard.create
          on_success:
            - ObservationsData_start
        ObservationsData_start:
          target: ObservationsData
          activities:
            - call_operation: Standard.start
          on_success:
            - ObservationsData_started
        ObservationsData_started:
          target: ObservationsData
          activities:
            - set_state: started
          on_success:
            - ObservationsData_delete
        ObservationsData_delete:
          target: ObservationsData
          activities:
            - call_operation: Standard.delete
          on_success:
            - ObservationsData_deleted
        ObservationsData_deleted:
          target: ObservationsData
          activities:
            - set_state: deleted
          on_success:
            - MoveObservationData_start
        MoveObservationData_start:
          target: MoveObservationData
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveObservationData_started
        MoveObservationData_started:
          target: MoveObservationData
          activities:
            - set_state: started
          on_success:
            - GetPreprocessDatasetInfo_create
        GetPreprocessDatasetInfo_create:
          target: GetPreprocessDatasetInfo
          activities:
            - call_operation: Standard.create
          on_success:
            - GetPreprocessDatasetInfo_start
        GetPreprocessDatasetInfo_start:
          target: GetPreprocessDatasetInfo
          activities:
            - call_operation: Standard.start
          on_success:
            - GetPreprocessDatasetInfo_started
        GetPreprocessDatasetInfo_started:
          target: GetPreprocessDatasetInfo
          activities:
            - set_state: started
          on_success:
            - FindHPCLocationsJob_submit
        FindHPCLocationsJob_submit:
          target: FindHPCLocationsJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindHPCLocationsJob_run
        FindHPCLocationsJob_run:
          target: FindHPCLocationsJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindHPCLocationsJob_executed
        FindHPCLocationsJob_executed:
          target: FindHPCLocationsJob
          activities:
            - set_state: executed
          on_success:
            - WRF_create
        WRF_create:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - WRF_enable_file_transfer
        WRF_enable_file_transfer:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.enable_file_transfer
          on_success:
            - DDIToHPCTaskJob_create
            - CreateStagingAreaWRFInputDir_start
        # Create a directory in cloud staging area and copy HPC inputs there
        CreateStagingAreaWRFInputDir_start:
          target: CreateStagingAreaWRFInputDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateStagingAreaWRFInputDir_started
        CreateStagingAreaWRFInputDir_started:
          target: CreateStagingAreaWRFInputDir
          activities:
            - set_state: started
          on_success:
            - StageWRFInputs_start
        # Stage HPC inputs to cloud staging area
        StageWRFInputs_start:
          target: StageWRFInputs
          activities:
            - call_operation: Standard.start
          on_success:
            - StageWRFInputs_started
        StageWRFInputs_started:
          target: StageWRFInputs
          activities:
            - set_state: started
          on_success:
            - CloudToHPCTaskJob_create
        # Transfer HPC inputs from Cloud staging area to HPC
        CloudToHPCTaskJob_create:
          target: CloudToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - CloudToHPCTaskJob_submit
        CloudToHPCTaskJob_submit:
          target: CloudToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - CloudToHPCTaskJob_submitted
        CloudToHPCTaskJob_submitted:
          target: CloudToHPCTaskJob
          activities:
            - set_state: submitted
          on_success:
            - CloudToHPCTaskJob_run
        CloudToHPCTaskJob_run:
          target: CloudToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - CloudToHPCTaskJob_executed
        CloudToHPCTaskJob_executed:
          target: CloudToHPCTaskJob
          activities:
            - set_state: executed
          on_success:
            - WRF_submit
        DDIToHPCTaskJob_create:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToHPCTaskJob_submit
        DDIToHPCTaskJob_submit:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToHPCTaskJob_submitted
        DDIToHPCTaskJob_submitted:
          target: DDIToHPCTaskJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToHPCTaskJob_run
        DDIToHPCTaskJob_run:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToHPCTaskJob_executed
        DDIToHPCTaskJob_executed:
          target: DDIToHPCTaskJob
          activities:
            - set_state: executed
          on_success:
            - CloudToHPCTaskJob_create
        WRF_submit:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - WRF_submitted
        WRF_submitted:
          target: WRF
          activities:
            - set_state: submitted
          on_success:
            - WRF_run
        WRF_run:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - WRF_executed
        WRF_executed:
          target: WRF
          activities:
            - set_state: executed
          on_success:
            - CreateWRFDir_start
            - HPCToCloudWRFJob_create
        # Transfer HPC results from HPC to Cloud staging area
        HPCToCloudWRFJob_create:
          target: HPCToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToCloudWRFJob_submit
        HPCToCloudWRFJob_submit:
          target: HPCToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToCloudWRFJob_submitted
        HPCToCloudWRFJob_submitted:
          target: HPCToCloudWRFJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToCloudWRFJob_run
        HPCToCloudWRFJob_run:
          target: HPCToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToCloudWRFJob_executed
        HPCToCloudWRFJob_executed:
          target: HPCToCloudWRFJob
          activities:
            - set_state: executed
          on_success:
            - MountWRFDataset_refresh_token
        CreateWRFDir_start:
          target: CreateWRFDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateWRFDir_started
        CreateWRFDir_started:
          target: CreateWRFDir
          activities:
            - set_state: started
          on_success:
            - MountWRFDataset_refresh_token
        MountWRFDataset_refresh_token:
          target: MountWRFDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountWRFDataset_start
        MountWRFDataset_start:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountWRFDataset_started
        MountWRFDataset_started:
          target: MountWRFDataset
          activities:
            - set_state: started
          on_success:
            - MoveWRFAuxhistResults_start
            - HPCToDDIJob_create
        MoveWRFAuxhistResults_start:
          target: MoveWRFAuxhistResults
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveWRFAuxhistResults_started
        MoveWRFAuxhistResults_started:
          target: MoveWRFAuxhistResults
          activities:
            - set_state: started
          on_success:
            - MoveWRFLexisResult_start
        MoveWRFLexisResult_start:
          target: MoveWRFLexisResult
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveWRFLexisResult_started
        MoveWRFLexisResult_started:
          target: MoveWRFLexisResult
          activities:
            - set_state: started
          on_success:
            - DDIToCloudDockerImageJob_create
        # Transfer HPC job results to DDI
        HPCToDDIJob_create:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToDDIJob_submit
        HPCToDDIJob_submit:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToDDIJob_submitted
        HPCToDDIJob_submitted:
          target: HPCToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToDDIJob_run
        HPCToDDIJob_run:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToDDIJob_executed
        HPCToDDIJob_executed:
          target: HPCToDDIJob
          activities:
            - set_state: executed
          on_success:
            - DDIToCloudDockerImageJob_create
        DDIToCloudDockerImageJob_create:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudDockerImageJob_submit
        DDIToCloudDockerImageJob_submit:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudDockerImageJob_submitted
        DDIToCloudDockerImageJob_submitted:
          target: DDIToCloudDockerImageJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudDockerImageJob_run
        DDIToCloudDockerImageJob_run:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudDockerImageJob_executed
        DDIToCloudDockerImageJob_executed:
          target: DDIToCloudDockerImageJob
          activities:
            - set_state: executed
          on_success:
            - MountDockerImageDataset_create
        MountDockerImageDataset_create:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountDockerImageDataset_created
        MountDockerImageDataset_created:
          target: MountDockerImageDataset
          activities:
            - set_state: created
          on_success:
            - MountDockerImageDataset_refresh_token
        MountDockerImageDataset_refresh_token:
          target: MountDockerImageDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountDockerImageDataset_start
            - DDIToCloudNCLScriptJob_create
        MountDockerImageDataset_start:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountDockerImageDataset_started
        MountDockerImageDataset_started:
          target: MountDockerImageDataset
          activities:
            - set_state: started
          on_success:
            - FindArchive_start
        FindArchive_start:
          target: FindArchive
          activities:
            - call_operation: Standard.start
          on_success:
            - FindArchive_started
        FindArchive_started:
          target: FindArchive
          activities:
            - set_state: started
          on_success:
            - ImageLoader_create
        ImageLoader_create:
          target: ImageLoader
          activities:
            - call_operation: Standard.create
          on_success:
            - ImageLoader_created
        ImageLoader_created:
          target: ImageLoader
          activities:
            - set_state: created
          on_success:
            - ImageLoader_start
        ImageLoader_start:
          target: ImageLoader
          activities:
            - call_operation: Standard.start
          on_success:
            - ImageLoader_started
        ImageLoader_started:
          target: ImageLoader
          activities:
            - set_state: started
          on_success:
            - WRFToMet_create
        DDIToCloudNCLScriptJob_create:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudNCLScriptJob_submit
        DDIToCloudNCLScriptJob_submit:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudNCLScriptJob_submitted
        DDIToCloudNCLScriptJob_submitted:
          target: DDIToCloudNCLScriptJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudNCLScriptJob_run
        DDIToCloudNCLScriptJob_run:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudNCLScriptJob_executed
        DDIToCloudNCLScriptJob_executed:
          target: DDIToCloudNCLScriptJob
          activities:
            - set_state: executed
          on_success:
            - MountNCLScriptDataset_create
        MountNCLScriptDataset_create:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountNCLScriptDataset_created
        MountNCLScriptDataset_created:
          target: MountNCLScriptDataset
          activities:
            - set_state: created
          on_success:
            - MountNCLScriptDataset_refresh_token
        MountNCLScriptDataset_refresh_token:
          target: MountNCLScriptDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountNCLScriptDataset_start
        MountNCLScriptDataset_start:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountNCLScriptDataset_started
        MountNCLScriptDataset_started:
          target: MountNCLScriptDataset
          activities:
            - set_state: started
          on_success:
            - FindNCLScript_start
        FindNCLScript_start:
          target: FindNCLScript
          activities:
            - call_operation: Standard.start
          on_success:
            - FindNCLScript_started
        FindNCLScript_started:
          target: FindNCLScript
          activities:
            - set_state: started
          on_success:
            - CopyNCLScriptFromStagingArea_start
        CopyNCLScriptFromStagingArea_start:
          target: CopyNCLScriptFromStagingArea
          activities:
            - call_operation: Standard.start
          on_success:
            - WRFToMet_create
        WRFToMet_create:
          target: WRFToMet
          activities:
            - call_operation: Standard.create
          on_success:
            - WRFToMet_start
        WRFToMet_start:
          target: WRFToMet
          activities:
            - call_operation: Standard.start
          on_success:
            - WRFToMet_started
        WRFToMet_started:
          target: WRFToMet
          activities:
            - set_state: started
          on_success:
            - CreateStagingAreaResultDir_start
        CreateStagingAreaResultDir_start:
          target: CreateStagingAreaResultDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateStagingAreaResultDir_started
        CreateStagingAreaResultDir_started:
          target: CreateStagingAreaResultDir
          activities:
            - set_state: started
          on_success:
            - StageMETResults_start
        StageMETResults_start:
          target: StageMETResults
          activities:
            - call_operation: Standard.start
          on_success:
            - StageMETResults_started
        StageMETResults_started:
          target: StageMETResults
          activities:
            - set_state: started
          on_success:
            - METResultsToDDIJob_create
        METResultsToDDIJob_create:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - METResultsToDDIJob_submit
        METResultsToDDIJob_submit:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - METResultsToDDIJob_submitted
        METResultsToDDIJob_submitted:
          target: METResultsToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - METResultsToDDIJob_run
        METResultsToDDIJob_run:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - METResultsToDDIJob_executed
        METResultsToDDIJob_executed:
          target: METResultsToDDIJob
          activities:
            - set_state: executed
          on_success:
            - GetPostprocessDatasetInfo_create
        GetPostprocessDatasetInfo_create:
          target: GetPostprocessDatasetInfo
          activities:
            - call_operation: Standard.create
          on_success:
            - GetPostprocessDatasetInfo_start
        GetPostprocessDatasetInfo_start:
          target: GetPostprocessDatasetInfo
          activities:
            - call_operation: Standard.start
          on_success:
            - GetPostprocessDatasetInfo_started
        GetPostprocessDatasetInfo_started:
          target: GetPostprocessDatasetInfo
          activities:
            - set_state: started
          on_success:
            - FindWindowsCloudLocationJob_submit
        FindWindowsCloudLocationJob_submit:
          target: FindWindowsCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindWindowsCloudLocationJob_run
        FindWindowsCloudLocationJob_run:
          target: FindWindowsCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindWindowsCloudLocationJob_executed
        FindWindowsCloudLocationJob_executed:
          target: FindWindowsCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - WindowsNetwork_install
        WindowsNetwork_install:
          target: PublicNetADMSWinVM
          activities:
            - delegate: install
          on_success:
            - WindowsCompute_install
        WindowsCompute_install:
          target: ADMS_WIN_VM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccessWinVM_start
        GetDDIAccessWinVM_start:
          target: GetDDIAccessWinVM
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccessWinVM_started
        GetDDIAccessWinVM_started:
          target: GetDDIAccessWinVM
          activities:
            - set_state: started
          on_success:
            - RefreshADMSRunToken_start
        RefreshADMSRunToken_start:
          target: RefreshADMSRunToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSRunToken_started
        RefreshADMSRunToken_started:
          target: RefreshADMSRunToken
          activities:
            - set_state: started
          on_success:
            - ADMSRun_start
        ADMSRun_start:
          target: ADMSRun
          activities:
            - call_operation: Standard.start
          on_success:
            - ADMSRun_started
        ADMSRun_started:
          target: ADMSRun
          activities:
            - set_state: started
          on_success:
            - RefreshADMSStoreToken_start
        RefreshADMSStoreToken_start:
          target: RefreshADMSStoreToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSStoreToken_started
        RefreshADMSStoreToken_started:
          target: RefreshADMSStoreToken
          activities:
            - set_state: started
          on_success:
            - ADMSStore_start
        ADMSStore_start:
          target: ADMSStore
          activities:
            - call_operation: Standard.start
          on_success:
            - ADMSStore_started
        ADMSStore_started:
          target: ADMSStore
          activities:
            - set_state: started
          on_success:
            - DewetraUpload_start
        DewetraUpload_start:
          target: DewetraUpload
          activities:
            - call_operation: Standard.start
          on_success:
            - DewetraUpload_started
        DewetraUpload_started:
          target: DewetraUpload
          activities:
            - set_state: started
          on_success:
            - RefreshADMSWinVMToken_start
        RefreshADMSWinVMToken_start:
          target: RefreshADMSWinVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSWinVMToken_started
        RefreshADMSWinVMToken_started:
          target: RefreshADMSWinVMToken
          activities:
            - set_state: started
          on_success:
            - WindowsCompute_uninstall
        WindowsCompute_uninstall:
          target: ADMS_WIN_VM
          activities:
            - delegate: uninstall
          on_success:
            - WindowsNetwork_uninstall
        WindowsNetwork_uninstall:
          target: PublicNetADMSWinVM
          activities:
            - delegate: uninstall
          on_success:
            - MountGEOGDataset_refresh_token_for_stop
        MountGEOGDataset_refresh_token_for_stop:
          target: MountGEOGDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountGEOGDataset_stop
        MountGEOGDataset_stop:
          target: MountGEOGDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountGEOGDataset_stopped
        MountGEOGDataset_stopped:
          target: MountGEOGDataset
          activities:
            - set_state: stopped
          on_success:
            - MountWRFDataset_refresh_token_for_stop
        MountWRFDataset_refresh_token_for_stop:
          target: MountWRFDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountWRFDataset_stop
        MountWRFDataset_stop:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountWRFDataset_stopped
        MountWRFDataset_stopped:
          target: MountWRFDataset
          activities:
            - set_state: stopped
          on_success:
            - MountDockerImageDataset_refresh_token_for_stop
        MountDockerImageDataset_refresh_token_for_stop:
          target: MountDockerImageDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountDockerImageDataset_stop
        MountDockerImageDataset_stop:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountDockerImageDataset_stopped
        MountDockerImageDataset_stopped:
          target: MountDockerImageDataset
          activities:
            - set_state: stopped
          on_success:
            - MountNCLScriptDataset_refresh_token_for_stop
        MountNCLScriptDataset_refresh_token_for_stop:
          target: MountNCLScriptDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountNCLScriptDataset_stop
        MountNCLScriptDataset_stop:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountNCLScriptDataset_stopped
        MountNCLScriptDataset_stopped:
          target: MountNCLScriptDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudGEOGDataJob_create
        DeleteCloudGEOGDataJob_create:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudGEOGDataJob_created
        DeleteCloudGEOGDataJob_created:
          target: DeleteCloudGEOGDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudGEOGDataJob_submit
        DeleteCloudGEOGDataJob_submit:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudGEOGDataJob_submitted
        DeleteCloudGEOGDataJob_submitted:
          target: DeleteCloudGEOGDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudGEOGDataJob_run
        DeleteCloudGEOGDataJob_run:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudGEOGDataJob_executed
        DeleteCloudGEOGDataJob_executed:
          target: DeleteCloudGEOGDataJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudWRFDataJob_create
        DeleteCloudWRFDataJob_create:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudWRFDataJob_created
        DeleteCloudWRFDataJob_created:
          target: DeleteCloudWRFDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudWRFDataJob_submit
        DeleteCloudWRFDataJob_submit:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudWRFDataJob_submitted
        DeleteCloudWRFDataJob_submitted:
          target: DeleteCloudWRFDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudWRFDataJob_run
        DeleteCloudWRFDataJob_run:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudWRFDataJob_executed
        DeleteCloudWRFDataJob_executed:
          target: DeleteCloudWRFDataJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudDataImageJob_create
        DeleteCloudDataImageJob_create:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataImageJob_created
        DeleteCloudDataImageJob_created:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataImageJob_submit
        DeleteCloudDataImageJob_submit:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataImageJob_submitted
        DeleteCloudDataImageJob_submitted:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataImageJob_run
        DeleteCloudDataImageJob_run:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataImageJob_executed
        DeleteCloudDataImageJob_executed:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudDataNCLScriptJob_create
        DeleteCloudDataNCLScriptJob_create:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataNCLScriptJob_created
        DeleteCloudDataNCLScriptJob_created:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataNCLScriptJob_submit
        DeleteCloudDataNCLScriptJob_submit:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataNCLScriptJob_submitted
        DeleteCloudDataNCLScriptJob_submitted:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataNCLScriptJob_run
        DeleteCloudDataNCLScriptJob_run:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataNCLScriptJob_executed
        DeleteCloudDataNCLScriptJob_executed:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: executed
          on_success:
            - WRF_disable_file_transfer
        WRF_disable_file_transfer:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.disable_file_transfer
          on_success:
            - WRF_delete
        WRF_delete:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - WRF_deleted
        WRF_deleted:
          target: WRF
          activities:
            - set_state: deleted
          on_success:
            - RefreshADMSVMToken_start
        RefreshADMSVMToken_start:
          target: RefreshADMSVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSVMToken_started
        RefreshADMSVMToken_started:
          target: RefreshADMSVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ADMS_VM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNetADMSVM
          activities:
            - delegate: uninstall
    testPostJobCreate:
      steps:
        WRF_enable_file_transfer:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.enable_file_transfer
          on_success:
            - DDIToHPCTaskJob_create
            - CreateStagingAreaWRFInputDir_start
        # Create a directory in cloud staging area and copy HPC inputs there
        CreateStagingAreaWRFInputDir_start:
          target: CreateStagingAreaWRFInputDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateStagingAreaWRFInputDir_started
        CreateStagingAreaWRFInputDir_started:
          target: CreateStagingAreaWRFInputDir
          activities:
            - set_state: started
          on_success:
            - StageWRFInputs_start
        # Stage HPC inputs to cloud staging area
        StageWRFInputs_start:
          target: StageWRFInputs
          activities:
            - call_operation: Standard.start
          on_success:
            - StageWRFInputs_started
        StageWRFInputs_started:
          target: StageWRFInputs
          activities:
            - set_state: started
          on_success:
            - CloudToHPCTaskJob_create
        # Transfer HPC inputs from Cloud staging area to HPC
        CloudToHPCTaskJob_create:
          target: CloudToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - CloudToHPCTaskJob_submit
        CloudToHPCTaskJob_submit:
          target: CloudToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - CloudToHPCTaskJob_submitted
        CloudToHPCTaskJob_submitted:
          target: CloudToHPCTaskJob
          activities:
            - set_state: submitted
          on_success:
            - CloudToHPCTaskJob_run
        CloudToHPCTaskJob_run:
          target: CloudToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - CloudToHPCTaskJob_executed
        CloudToHPCTaskJob_executed:
          target: CloudToHPCTaskJob
          activities:
            - set_state: executed
          on_success:
            - WRF_submit
        DDIToHPCTaskJob_create:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToHPCTaskJob_submit
        DDIToHPCTaskJob_submit:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToHPCTaskJob_submitted
        DDIToHPCTaskJob_submitted:
          target: DDIToHPCTaskJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToHPCTaskJob_run
        DDIToHPCTaskJob_run:
          target: DDIToHPCTaskJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToHPCTaskJob_executed
        DDIToHPCTaskJob_executed:
          target: DDIToHPCTaskJob
          activities:
            - set_state: executed
          on_success:
            - CloudToHPCTaskJob_create
        WRF_submit:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - WRF_submitted
        WRF_submitted:
          target: WRF
          activities:
            - set_state: submitted
          on_success:
            - WRF_run
        WRF_run:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - WRF_executed
        WRF_executed:
          target: WRF
          activities:
            - set_state: executed
    testPostProcessing:
      steps:
        HPCToCloudWRFJob_create:
          target: HPCToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToCloudWRFJob_submit
        HPCToCloudWRFJob_submit:
          target: HPCToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToCloudWRFJob_submitted
        HPCToCloudWRFJob_submitted:
          target: HPCToCloudWRFJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToCloudWRFJob_run
        HPCToCloudWRFJob_run:
          target: HPCToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToCloudWRFJob_executed
        HPCToCloudWRFJob_executed:
          target: HPCToCloudWRFJob
          activities:
            - set_state: executed
          on_success:
            - CreateWRFDir_start
        CreateWRFDir_start:
          target: CreateWRFDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateWRFDir_started
        CreateWRFDir_started:
          target: CreateWRFDir
          activities:
            - set_state: started
          on_success:
            - MountWRFDataset_refresh_token
        MountWRFDataset_refresh_token:
          target: MountWRFDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountWRFDataset_start
        MountWRFDataset_start:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountWRFDataset_started
        MountWRFDataset_started:
          target: MountWRFDataset
          activities:
            - set_state: started
          on_success:
            - MoveWRFAuxhistResults_start
            - HPCToDDIJob_create
        MoveWRFAuxhistResults_start:
          target: MoveWRFAuxhistResults
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveWRFAuxhistResults_started
        MoveWRFAuxhistResults_started:
          target: MoveWRFAuxhistResults
          activities:
            - set_state: started
          on_success:
            - MoveWRFLexisResult_start
        MoveWRFLexisResult_start:
          target: MoveWRFLexisResult
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveWRFLexisResult_started
        MoveWRFLexisResult_started:
          target: MoveWRFLexisResult
          activities:
            - set_state: started
          on_success:
            - DDIToCloudDockerImageJob_create
        # Transfer HPC job results to DDI
        HPCToDDIJob_create:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - HPCToDDIJob_submit
        HPCToDDIJob_submit:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - HPCToDDIJob_submitted
        HPCToDDIJob_submitted:
          target: HPCToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - HPCToDDIJob_run
        HPCToDDIJob_run:
          target: HPCToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - HPCToDDIJob_executed
        HPCToDDIJob_executed:
          target: HPCToDDIJob
          activities:
            - set_state: executed
          on_success:
            - DDIToCloudDockerImageJob_create
        DDIToCloudDockerImageJob_create:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudDockerImageJob_submit
        DDIToCloudDockerImageJob_submit:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudDockerImageJob_submitted
        DDIToCloudDockerImageJob_submitted:
          target: DDIToCloudDockerImageJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudDockerImageJob_run
        DDIToCloudDockerImageJob_run:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudDockerImageJob_executed
        DDIToCloudDockerImageJob_executed:
          target: DDIToCloudDockerImageJob
          activities:
            - set_state: executed
          on_success:
            - MountDockerImageDataset_create
        MountDockerImageDataset_create:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountDockerImageDataset_created
        MountDockerImageDataset_created:
          target: MountDockerImageDataset
          activities:
            - set_state: created
          on_success:
            - MountDockerImageDataset_refresh_token
        MountDockerImageDataset_refresh_token:
          target: MountDockerImageDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - DDIToCloudNCLScriptJob_create
            - MountDockerImageDataset_start
        MountDockerImageDataset_start:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountDockerImageDataset_started
        MountDockerImageDataset_started:
          target: MountDockerImageDataset
          activities:
            - set_state: started
          on_success:
            - FindArchive_start
        FindArchive_start:
          target: FindArchive
          activities:
            - call_operation: Standard.start
          on_success:
            - FindArchive_started
        FindArchive_started:
          target: FindArchive
          activities:
            - set_state: started
          on_success:
            - ImageLoader_create
        ImageLoader_create:
          target: ImageLoader
          activities:
            - call_operation: Standard.create
          on_success:
            - ImageLoader_created
        ImageLoader_created:
          target: ImageLoader
          activities:
            - set_state: created
          on_success:
            - ImageLoader_start
        ImageLoader_start:
          target: ImageLoader
          activities:
            - call_operation: Standard.start
          on_success:
            - ImageLoader_started
        ImageLoader_started:
          target: ImageLoader
          activities:
            - set_state: started
          on_success:
            - WRFToMet_create
        DDIToCloudNCLScriptJob_create:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudNCLScriptJob_submit
        DDIToCloudNCLScriptJob_submit:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudNCLScriptJob_submitted
        DDIToCloudNCLScriptJob_submitted:
          target: DDIToCloudNCLScriptJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudNCLScriptJob_run
        DDIToCloudNCLScriptJob_run:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudNCLScriptJob_executed
        DDIToCloudNCLScriptJob_executed:
          target: DDIToCloudNCLScriptJob
          activities:
            - set_state: executed
          on_success:
            - MountNCLScriptDataset_create
        MountNCLScriptDataset_create:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountNCLScriptDataset_created
        MountNCLScriptDataset_created:
          target: MountNCLScriptDataset
          activities:
            - set_state: created
          on_success:
            - MountNCLScriptDataset_refresh_token
        MountNCLScriptDataset_refresh_token:
          target: MountNCLScriptDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountNCLScriptDataset_start
        MountNCLScriptDataset_start:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountNCLScriptDataset_started
        MountNCLScriptDataset_started:
          target: MountNCLScriptDataset
          activities:
            - set_state: started
          on_success:
            - FindNCLScript_start
        FindNCLScript_start:
          target: FindNCLScript
          activities:
            - call_operation: Standard.start
          on_success:
            - FindNCLScript_started
        FindNCLScript_started:
          target: FindNCLScript
          activities:
            - set_state: started
          on_success:
            - CopyNCLScriptFromStagingArea_start
        CopyNCLScriptFromStagingArea_start:
          target: CopyNCLScriptFromStagingArea
          activities:
            - call_operation: Standard.start
          on_success:
            - WRFToMet_create
        WRFToMet_create:
          target: WRFToMet
          activities:
            - call_operation: Standard.create
          on_success:
            - WRFToMet_start
        WRFToMet_start:
          target: WRFToMet
          activities:
            - call_operation: Standard.start
          on_success:
            - WRFToMet_started
        WRFToMet_started:
          target: WRFToMet
          activities:
            - set_state: started
          on_success:
            - CreateStagingAreaResultDir_start
        CreateStagingAreaResultDir_start:
          target: CreateStagingAreaResultDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateStagingAreaResultDir_started
        CreateStagingAreaResultDir_started:
          target: CreateStagingAreaResultDir
          activities:
            - set_state: started
          on_success:
            - StageMETResults_start
        StageMETResults_start:
          target: StageMETResults
          activities:
            - call_operation: Standard.start
          on_success:
            - StageMETResults_started
        StageMETResults_started:
          target: StageMETResults
          activities:
            - set_state: started
          on_success:
            - METResultsToDDIJob_create
        METResultsToDDIJob_create:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - METResultsToDDIJob_submit
        METResultsToDDIJob_submit:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - METResultsToDDIJob_submitted
        METResultsToDDIJob_submitted:
          target: METResultsToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - METResultsToDDIJob_run
        METResultsToDDIJob_run:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - METResultsToDDIJob_executed
        METResultsToDDIJob_executed:
          target: METResultsToDDIJob
          activities:
            - set_state: executed
          on_success:
            - GetPostprocessDatasetInfo_create
        GetPostprocessDatasetInfo_create:
          target: GetPostprocessDatasetInfo
          activities:
            - call_operation: Standard.create
          on_success:
            - GetPostprocessDatasetInfo_start
        GetPostprocessDatasetInfo_start:
          target: GetPostprocessDatasetInfo
          activities:
            - call_operation: Standard.start
          on_success:
            - GetPostprocessDatasetInfo_started
        GetPostprocessDatasetInfo_started:
          target: GetPostprocessDatasetInfo
          activities:
            - set_state: started
          on_success:
            - FindWindowsCloudLocationJob_submit
        FindWindowsCloudLocationJob_submit:
          target: FindWindowsCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindWindowsCloudLocationJob_run
        FindWindowsCloudLocationJob_run:
          target: FindWindowsCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindWindowsCloudLocationJob_executed
        FindWindowsCloudLocationJob_executed:
          target: FindWindowsCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - WindowsNetwork_install
        WindowsNetwork_install:
          target: PublicNetADMSWinVM
          activities:
            - delegate: install
          on_success:
            - WindowsCompute_install
        WindowsCompute_install:
          target: ADMS_WIN_VM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccessWinVM_start
        GetDDIAccessWinVM_start:
          target: GetDDIAccessWinVM
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccessWinVM_started
        GetDDIAccessWinVM_started:
          target: GetDDIAccessWinVM
          activities:
            - set_state: started
          on_success:
            - RefreshADMSRunToken_start
        RefreshADMSRunToken_start:
          target: RefreshADMSRunToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSRunToken_started
        RefreshADMSRunToken_started:
          target: RefreshADMSRunToken
          activities:
            - set_state: started
          on_success:
            - ADMSRun_start
        ADMSRun_start:
          target: ADMSRun
          activities:
            - call_operation: Standard.start
          on_success:
            - ADMSRun_started
        ADMSRun_started:
          target: ADMSRun
          activities:
            - set_state: started
          on_success:
            - RefreshADMSStoreToken_start
        RefreshADMSStoreToken_start:
          target: RefreshADMSStoreToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSStoreToken_started
        RefreshADMSStoreToken_started:
          target: RefreshADMSStoreToken
          activities:
            - set_state: started
          on_success:
            - ADMSStore_start
        ADMSStore_start:
          target: ADMSStore
          activities:
            - call_operation: Standard.start
          on_success:
            - ADMSStore_started
        ADMSStore_started:
          target: ADMSStore
          activities:
            - set_state: started
          on_success:
            - DewetraUpload_start
        DewetraUpload_start:
          target: DewetraUpload
          activities:
            - call_operation: Standard.start
          on_success:
            - DewetraUpload_started
        DewetraUpload_started:
          target: DewetraUpload
          activities:
            - set_state: started
          on_success:
            - RefreshADMSWinVMToken_start
        RefreshADMSWinVMToken_start:
          target: RefreshADMSWinVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSWinVMToken_started
        RefreshADMSWinVMToken_started:
          target: RefreshADMSWinVMToken
          activities:
            - set_state: started
          on_success:
            - WindowsCompute_uninstall
        WindowsCompute_uninstall:
          target: ADMS_WIN_VM
          activities:
            - delegate: uninstall
          on_success:
            - WindowsNetwork_uninstall
        WindowsNetwork_uninstall:
          target: PublicNetADMSWinVM
          activities:
            - delegate: uninstall
          on_success:
            - MountGEOGDataset_refresh_token_for_stop
        MountGEOGDataset_refresh_token_for_stop:
          target: MountGEOGDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountGEOGDataset_stop
        MountGEOGDataset_stop:
          target: MountGEOGDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountGEOGDataset_stopped
        MountGEOGDataset_stopped:
          target: MountGEOGDataset
          activities:
            - set_state: stopped
          on_success:
            - MountWRFDataset_refresh_token_for_stop
        MountWRFDataset_refresh_token_for_stop:
          target: MountWRFDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountWRFDataset_stop
        MountWRFDataset_stop:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountWRFDataset_stopped
        MountWRFDataset_stopped:
          target: MountWRFDataset
          activities:
            - set_state: stopped
          on_success:
            - MountDockerImageDataset_refresh_token_for_stop
        MountDockerImageDataset_refresh_token_for_stop:
          target: MountDockerImageDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountDockerImageDataset_stop
        MountDockerImageDataset_stop:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountDockerImageDataset_stopped
        MountDockerImageDataset_stopped:
          target: MountDockerImageDataset
          activities:
            - set_state: stopped
          on_success:
            - MountNCLScriptDataset_refresh_token_for_stop
        MountNCLScriptDataset_refresh_token_for_stop:
          target: MountNCLScriptDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountNCLScriptDataset_stop
        MountNCLScriptDataset_stop:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountNCLScriptDataset_stopped
        MountNCLScriptDataset_stopped:
          target: MountNCLScriptDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudGEOGDataJob_create
        DeleteCloudGEOGDataJob_create:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudGEOGDataJob_created
        DeleteCloudGEOGDataJob_created:
          target: DeleteCloudGEOGDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudGEOGDataJob_submit
        DeleteCloudGEOGDataJob_submit:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudGEOGDataJob_submitted
        DeleteCloudGEOGDataJob_submitted:
          target: DeleteCloudGEOGDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudGEOGDataJob_run
        DeleteCloudGEOGDataJob_run:
          target: DeleteCloudGEOGDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudGEOGDataJob_executed
        DeleteCloudGEOGDataJob_executed:
          target: DeleteCloudGEOGDataJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudWRFDataJob_create
        DeleteCloudWRFDataJob_create:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudWRFDataJob_created
        DeleteCloudWRFDataJob_created:
          target: DeleteCloudWRFDataJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudWRFDataJob_submit
        DeleteCloudWRFDataJob_submit:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudWRFDataJob_submitted
        DeleteCloudWRFDataJob_submitted:
          target: DeleteCloudWRFDataJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudWRFDataJob_run
        DeleteCloudWRFDataJob_run:
          target: DeleteCloudWRFDataJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudWRFDataJob_executed
        DeleteCloudWRFDataJob_executed:
          target: DeleteCloudWRFDataJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudDataImageJob_create
        DeleteCloudDataImageJob_create:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataImageJob_created
        DeleteCloudDataImageJob_created:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataImageJob_submit
        DeleteCloudDataImageJob_submit:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataImageJob_submitted
        DeleteCloudDataImageJob_submitted:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataImageJob_run
        DeleteCloudDataImageJob_run:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataImageJob_executed
        DeleteCloudDataImageJob_executed:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudDataNCLScriptJob_create
        DeleteCloudDataNCLScriptJob_create:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataNCLScriptJob_created
        DeleteCloudDataNCLScriptJob_created:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataNCLScriptJob_submit
        DeleteCloudDataNCLScriptJob_submit:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataNCLScriptJob_submitted
        DeleteCloudDataNCLScriptJob_submitted:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataNCLScriptJob_run
        DeleteCloudDataNCLScriptJob_run:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataNCLScriptJob_executed
        DeleteCloudDataNCLScriptJob_executed:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: executed
          on_success:
            - WRF_disable_file_transfer
        WRF_disable_file_transfer:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: custom.disable_file_transfer
          on_success:
            - WRF_delete
        WRF_delete:
          target: WRF
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.delete
          on_success:
            - WRF_deleted
        WRF_deleted:
          target: WRF
          activities:
            - set_state: deleted
          on_success:
            - RefreshADMSVMToken_start
        RefreshADMSVMToken_start:
          target: RefreshADMSVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSVMToken_started
        RefreshADMSVMToken_started:
          target: RefreshADMSVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ADMS_VM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNetADMSVM
          activities:
            - delegate: uninstall
