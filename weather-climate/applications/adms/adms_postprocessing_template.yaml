tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.wp7.ADMSPostProcessingTemplate
  template_version: 0.1.0-SNAPSHOT
  template_author: lexis

description: ADMS post-processing template

imports:
  - yorc-types:1.1.0
  - yorc-openstack-types:3.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - docker-types:3.0.0
  - alien-base-types:3.0.0
  - org.lexis.common.ddi-types:1.0.1
  - org.lexis.common.dynamic-orchestration-types:1.0.1
  - org.ystia.docker.containers.docker.generic:3.0.0-SNAPSHOT
  - org.ystia.docker.ansible:3.0.0-SNAPSHOT
  - org.ystia.docker.images:3.0.0-SNAPSHOT
  - org.lexis.common.datatransfer:0.1.2-SNAPSHOT
  - org.lexis.wp7.adms:0.1.0

topology_template:
  inputs:
    token:
      type: string
      description: "OpenID Connect token"
      required: true
    project_id:
      type: string
      description: "LEXIS project identifier"
      required: true
    postprocessing_dataset_wrf_results_path:
      type: string
      description: WRF results dataset path in DDI
      required: true
    postprocessing_adms_type:
      type: string
      description: type of ADMS simulation executed, urban or industrial
      required: true
    postprocessing_start_date:
      type: string
      description: Start date of the simulation, format YYYYMMDDHH
      required: true
    postprocessing_adms_latitude:
      type: string
      description: latitude (example 47.31322)
      required: true
    postprocessing_adms_longitude:
      type: string
      description: longitude (example -2.063825)
      required: true
    postprocessing_title_dataset_MET_results:
      type: string
      description: Title of the MET processing results dataset to create in DDI
      required: true
    postprocessing_title_dataset_adms_result:
      type: string
      description: Title of the ADMS results dataset to create in DDI
      required: true
    postprocessing_adms_sftp_server_ip:
        type: string
        description: IP address of a SPTP server where to store results (default, no sftp server upload)
        required: false
        default: ""
    postprocessing_adms_sftp_port:
        type: integer
        description: Port of the SFTP server
        required: false
        default: 22
    postprocessing_project_short_name:
      type: string
      description: "DDI project short name"
      default: "wp7"
      required: false
    postprocessing_decrypt_dataset_wrf_results:
      type: boolean
      description: Should the WRF results input dataset be decrypted
      default: false
      required: false
    postprocessing_uncompress_dataset_wrf_results:
      type: boolean
      description: Should the WRF results input dataset be uncompressed
      default: true
      required: false
    postprocessing_image:
      type: string
      description: Post-processing docker image
      default: "adms/ncl:1.0.1"
      required: false
    postprocessing_dataset_docker_image_path:
      type: string
      description: Post-processing docker image tar archive path in DDI
      default: "project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c/263a6916-f506-11eb-8bc2-0050568fc9b5"
      required: false
    postprocessing_dataset_ncl_script_path:
      type: string
      description: Post-processing NCL script dataset path in DDI
      default: "project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c/6fb84668-f50a-11eb-8bc2-0050568fc9b5"
      required: false
    postprocessing_ddi_project_path:
      type: string
      description: Path where to transfer the post-processing results in DDI
      default: "project/proj2bdfd9ccf5a78c3ec68ee9e1d90d2c1c"
      required: false
    postprocessing_adms_sftp_industrial_dir:
        type: string
        description: SFTP destination directory for the industrial case
        required: false
        default: "/adms5"
    postprocessing_adms_sftp_urban_dir:
        type: string
        description: IP address of a SPTP server where to store results (no upload to sftp server if not defined)
        required: false
        default: "/admsurban"
    postprocessing_dataset_id_adms_urban_app:
      type: string
      description: ID of the dataset containing the ADMSUrban.exe and corresponding files. The DDI dataset has to contain single file called adms_urban.zip
      default: "f284db6c-2588-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_urban_static_data:
      type: string
      description: ID of the dataset containing the static data for ADMSUrban
      default: "f1275722-25b5-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_industrial_app:
      type: string
      description: ID of the dataset containing the ADMSIndustrial.exe and corresponding files. The DDI dataset has to contain single file called adms_industrial.zip
      default: "ab773490-544a-11eb-b72c-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_industrial_static_data:
      type: string
      description: ID of the dataset containing the static data for ADMSIndustrial
      default: "b6e09a96-25ac-11eb-bbae-0050568fcecc"
      required: false
  node_templates:
    # Validation of the token provided in input
    # Exchanging this token to have an access and refresh tokens
    # for any component needing it in the workflow
    ValidateExchangeToken:
      type: org.lexis.common.dynamic.orchestration.nodes.ValidateAndExchangeToken
      properties:
        token: {get_input: token}
        project_id: { get_input: project_id }

    # Job gathering info on the input dataset:
    # - on which locations it is available
    # - size
    # - number of files
    # to take placement decisions on computing resources using this dataset
    InputDatasetInfoJob:
      type: org.lexis.common.ddi.nodes.GetDDIDatasetInfoJob
      properties:
        token: {get_input: token}
        dataset_path: {get_input: postprocessing_dataset_wrf_results_path}
    # Find the best cloud location depending on the input dataset and needed cloud resources
    FindCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: InputDatasetInfoJob
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - CloudResourceVM:
            type_requirement: cloud_instance
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
    # Floating IP address network
    PublicNetADMSVM:
      type: yorc.nodes.openstack.FloatingIP
    ADMS_VM:
      type: tosca.nodes.Compute
      requirements:
        - networkPublicNetConnection:
            type_requirement: network
            node: PublicNetADMSVM
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            # num_cpus: 10
            num_cpus: 2
            disk_size: "20 GB"
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    # At the end of the workflow, the Cloud instance token should be refreshed
    # before attempting to uninstall the compute instance
    RefreshADMSVMToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMS_VM
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    Docker:
      type: org.ystia.docker.ansible.nodes.Docker
      requirements:
        - hostedOnVirtualMachineHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    GetDDIAccess:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    DDIToCloudDockerImageJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: { get_input: token }
        ddi_dataset_path: { get_input: postprocessing_dataset_docker_image_path }
        cloud_staging_area_directory_path: "adms_postprocessing_image"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    MountDockerImageDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/docker_image"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudDockerImageJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    FindArchive:
      type: org.lexis.common.datatransfer.nodes.FindDockerImageArchiveInStagingAreaDirectory
      properties:
        shell_patterns: ["*.tar*", "*.tgz"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountDockerImageDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    ImageLoader:
      type: org.ystia.docker.images.RuntimePathArchiveLoader
      properties:
        name: { get_input: postprocessing_image }
        force_load: true
      requirements:
        - archive_provider:
            type_requirement: archive_provider
            node: FindArchive
            capability: org.ystia.docker.images.capabilities.ArchiveProvider
            relationship: org.ystia.docker.images.relationships.ArchiveProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    DDIToCloudNCLScriptJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: { get_input: token }
        ddi_dataset_path: { get_input: postprocessing_dataset_ncl_script_path }
        cloud_staging_area_directory_path: "adms_postprocessing_ncl"
        timestamp_cloud_staging_area_directory: true
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    MountNCLScriptDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/ncl_script"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudNCLScriptJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    FindNCLScript:
      type: org.lexis.common.datatransfer.nodes.FindFilesInStagingAreaDirectory
      properties:
        shell_patterns: ["mkMET-*.ncl"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountNCLScriptDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    DDIToCloudWRFJob:
      type: org.lexis.common.ddi.nodes.DDIToCloudJob
      properties:
        token: { get_input: token }
        ddi_dataset_path: { get_input: postprocessing_dataset_wrf_results_path }
        cloud_staging_area_directory_path: "adms_postprocessing_wrf"
        timestamp_cloud_staging_area_directory: true
        decrypt: {get_input: postprocessing_decrypt_dataset_wrf_results}
        uncompress: {get_input: postprocessing_uncompress_dataset_wrf_results}
      requirements:
        - sameSite:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    MountWRFDataset:
      type: org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset
      properties:
        token: { get_input: token }
        mount_point_directory: "/mnt/cloud_staging_area/wrf_results"
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccess
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - data_transfer:
            type_requirement: data_transfer
            node: DDIToCloudWRFJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    FindWRFiles:
      type: org.lexis.common.datatransfer.nodes.FindFilesInStagingAreaDirectory
      properties:
        shell_patterns: ["auxhist*"]
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: MountWRFDataset
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    MoveWRFFiles:
      type: org.lexis.common.datatransfer.nodes.MoveFilesFromProvider
      properties:
        destination_directory:  "/mnt/cloud_staging_area/adms/adms_data/DATA-WRF/"
      requirements:
        - files_provider:
            type_requirement: files_provider
            node: FindWRFiles
            capability: org.lexis.common.datatransfer.capabilities.FilesProvider
            relationship: org.lexis.common.datatransfer.relationships.FilesProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    MoveNCLScript:
      type: org.lexis.common.datatransfer.nodes.CopyFilesFromProvider
      properties:
        destination_directory:  "/mnt/cloud_staging_area/adms/adms_data"
      requirements:
        - files_provider:
            type_requirement: files_provider
            node: FindNCLScript
            capability: org.lexis.common.datatransfer.capabilities.FilesProvider
            relationship: org.lexis.common.datatransfer.relationships.FilesProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    WRFToMet:
      type: org.ystia.docker.containers.docker.generic.nodes.GenericContainer
      metadata:
        task: postprocessing
      properties:
        auto_remove: false
        cleanup: false
        detach: false
        image: {get_input: postprocessing_image}
        keep_volumes: true
        restart_policy: no
        cpu_share: 1.0
        volumes: ["/mnt/cloud_staging_area/adms/adms_data/:/wrfdata"]
        docker_env_vars:  {concat: ["{\"TYPOUT\": \"", get_input: postprocessing_adms_type, "\", \"LAT\": \"", get_input: postprocessing_adms_latitude, "\", \"LON\": \"", get_input: postprocessing_adms_longitude, "\"}"]}
      requirements:
        - hostedOnContainerRuntimeDockerHost:
            type_requirement: host
            node: Docker
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    CreateStagingAreaResultDir:
      type: org.lexis.common.datatransfer.nodes.CreateStagingAreaDirectory
      properties:
        directory: "adms_result"
      requirements:
        - mountedCloudStagingArea:
            type_requirement: mounted_staging_area
            node: MountWRFDataset
            capability: org.lexis.common.ddi.capabilities.MountedStagingAreaAccess
            relationship: org.lexis.common.datatransfer.relationships.MountedCloudStagingArea
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    StageMETResults:
      type: org.lexis.common.datatransfer.nodes.CopyFilesToStagingAreaDirectory
      properties:
        source_directory: "/mnt/cloud_staging_area/adms/adms_data/DATA-WRF/"
        source_files: [ "*.met" ]
        destination_subdirectory: "met"
      requirements:
        - staging_area_directory:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaResultDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
        - hostedOnComputeHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    METResultsToDDIJob:
      type: org.lexis.common.ddi.nodes.CloudToDDIJob
      properties:
        metadata: {concat: ["{\"creator\": [\"ADMS workflow\"], \"contributor\": [\"ADMS workflow\"], \"publisher\": [\"ADMS workflow\"], \"resourceType\": \"Dataset\", \"title\": \"", get_input: postprocessing_title_dataset_MET_results, "\"}"]}
        token: { get_input: token }
        ddi_path: { get_input: postprocessing_ddi_project_path }
        source_subdirectory: "met"
      requirements:
        - cloud_area_directory_provider:
            type_requirement: cloud_area_directory_provider
            node: CreateStagingAreaResultDir
            capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
            relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
    DeleteCloudDataImageJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudDockerImageJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudDataNCLScriptJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudNCLScriptJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    DeleteCloudDataWRFJob:
      type: org.lexis.common.ddi.nodes.DeleteCloudDataJob
      properties:
        token: { get_input: token }
      requirements:
        - cloud_area_dataset_provider:
            type_requirement: cloud_area_dataset_provider
            node: DDIToCloudWRFJob
            capability: org.lexis.common.ddi.capabilities.DataTransferCloud
            relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
    # Get post-processing results details (size, number of files)
    GetPostprocessDatasetInfo:
      type: org.lexis.common.ddi.nodes.GetComputeInstanceDatasetInfo
      properties:
        dataset_path: "/mnt/cloud_staging_area/wrf_results/adms_result/met"
      requirements:
        - host:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    # Find the best cloud location depending on the input dataset and needed cloud resources
    FindWindowsCloudLocationJob:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocationsJob
      metadata:
        task: dynamic_orchestration
      properties:
        token: { get_input: token }
        project_id: { get_input: project_id }
      requirements:
        - InputDataset:
            type_requirement: input_dataset
            node: GetPostprocessDatasetInfo
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
        - CloudResourceWinVM:
            type_requirement: cloud_instance
            node: ADMS_WIN_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
    # Floating IP address network
    PublicNetADMSWinVM:
      type: yorc.nodes.openstack.FloatingIP
    ADMS_WIN_VM:
      type: tosca.nodes.Compute
      requirements:
        - networkNetworkConnection:
            type_requirement: network
            node: PublicNetADMSWinVM
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
        os:
          properties:
            type: "windows"
    # At the end of the workflow, the Cloud instance token should be refreshed
    # before attempting to uninstall the compute instance
    RefreshADMSWinVMToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMS_WIN_VM
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    GetDDIAccessWinVM:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ADMS_WIN_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    RefreshADMSRunToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMSRun
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    ADMSRun:
      type: org.lexis.wp7.nodes.ADMSRun
      properties:
        adms_type: { get_input: postprocessing_adms_type }
        adms_start_date: {get_input: postprocessing_start_date}
        dataset_title_ncl_result: { get_input: postprocessing_title_dataset_MET_results }
        dataset_id_adms_urban_app: { get_input: postprocessing_dataset_id_adms_urban_app }
        dataset_id_adms_urban_static_data: { get_input: postprocessing_dataset_id_adms_urban_static_data }
        dataset_id_adms_industrial_app: { get_input: postprocessing_dataset_id_adms_industrial_app }
        dataset_id_adms_industrial_static_data: { get_input: postprocessing_dataset_id_adms_industrial_static_data }
        ddi_project_short_name: { get_input: postprocessing_project_short_name }
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccessWinVM
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - hostedOnAdmsVmHost:
            type_requirement: host
            node: ADMS_WIN_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    RefreshADMSStoreToken:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMSStore
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    ADMSStore:
      type: org.lexis.wp7.nodes.ADMSStore
      properties:
        adms_type: { get_input: postprocessing_adms_type }
        adms_start_date: {get_input: postprocessing_start_date}
        dataset_title_adms_result: { get_input: postprocessing_title_dataset_adms_result }
        adms_sftp_server_ip: { get_input: postprocessing_adms_sftp_server_ip }
        adms_sftp_port: { get_input: postprocessing_adms_sftp_port }
        adms_sftp_industrial_dir: { get_input: postprocessing_adms_sftp_industrial_dir }
        adms_sftp_urban_dir: { get_input: postprocessing_adms_sftp_urban_dir }
        ddi_project_short_name: { get_input: postprocessing_project_short_name }
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccessWinVM
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - hostedOnAdmsVmHost:
            type_requirement: host
            node: ADMS_WIN_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn

  outputs:
    postprocessing_dataset_met_result_path:
      description: DDI path to ADMS MET results
      value: { get_attribute: [ METResultsToDDIJob, destination_path ] }
    postprocessing_dataset_adms_result_id:
      description: ID of the dataset where ADMS post-process results are stored
      value: { get_attribute: [ ADMSStore, dataset_id_result ] }
  workflows:
    # At deployment time, validating the input token and exchanging it
    # to get an access/refresh token for the orchestrator
    install:
      steps:
        ValidateExchangeToken_start:
          target: ValidateExchangeToken
          activities:
            - call_operation: Standard.start
          on_success:
            - ValidateExchangeToken_started
        ValidateExchangeToken_started:
          target: ValidateExchangeToken
          activities:
            - set_state: started
    uninstall:
      steps:
        DeleteCloudDataImageJob_create:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataImageJob_submit
        DeleteCloudDataImageJob_submit:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataNCLScriptJob_create
        DeleteCloudDataNCLScriptJob_create:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataNCLScriptJob_submit
        DeleteCloudDataNCLScriptJob_submit:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataWRFJob_create
        DeleteCloudDataWRFJob_create:
          target: DeleteCloudDataWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataWRFJob_submit
        DeleteCloudDataWRFJob_submit:
          target: DeleteCloudDataWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - RefreshADMSVMToken_start
        RefreshADMSVMToken_start:
          target: RefreshADMSVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSVMToken_started
        RefreshADMSVMToken_started:
          target: RefreshADMSVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ADMS_VM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNetADMSVM
          activities:
            - delegate: uninstall
          on_success:
            - RefreshADMSWinVMToken_start
        RefreshADMSWinVMToken_start:
          target: RefreshADMSWinVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSWinVMToken_started
        RefreshADMSWinVMToken_started:
          target: RefreshADMSWinVMToken
          activities:
            - set_state: started
          on_success:
            - WindowsCompute_uninstall
        WindowsCompute_uninstall:
          target: ADMS_WIN_VM
          activities:
            - delegate: uninstall
          on_success:
            - WindowsNetwork_uninstall
        WindowsNetwork_uninstall:
          target: PublicNetADMSWinVM
          activities:
            - delegate: uninstall
    Run:
      steps:
        # Submit DDI job to get info on dataset (DDI location where it is available, size...)
        InputDatasetInfoJob_submit:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - InputDatasetInfoJob_run
        InputDatasetInfoJob_run:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - InputDatasetInfoJob_executed
        InputDatasetInfoJob_executed:
          target: InputDatasetInfoJob
          activities:
            - set_state: executed
          on_success:
            - FindCloudLocationJob_submit
        # Submit the computation to find the best location from these inputs
        FindCloudLocationJob_submit:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindCloudLocationJob_run
        FindCloudLocationJob_run:
          target: FindCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindCloudLocationJob_executed
        FindCloudLocationJob_executed:
          target: FindCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - DDIToCloudDockerImageJob_create
            - Network_install
        # Get a floating IP address for the Cloud Compute instance
        Network_install:
          target: PublicNetADMSVM
          activities:
            - delegate: install
          on_success:
            - Compute_install
        Compute_install:
          target: ADMS_VM
          activities:
            - delegate: install
          on_success:
            - Docker_create
        Docker_create:
          target: Docker
          activities:
            - call_operation: Standard.create
          on_success:
            - Docker_created
        Docker_created:
          target: Docker
          activities:
            - set_state: created
          on_success:
            - Docker_configure
        Docker_configure:
          target: Docker
          activities:
            - call_operation: Standard.configure
          on_success:
            - Docker_configured
        Docker_configured:
          target: Docker
          activities:
            - set_state: configured
          on_success:
            - Docker_start
        Docker_start:
          target: Docker
          activities:
            - call_operation: Standard.start
          on_success:
            - Docker_started
        Docker_started:
          target: Docker
          activities:
            - set_state: started
          on_success:
            - GetDDIAccess_start
        GetDDIAccess_start:
          target: GetDDIAccess
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccess_started
        GetDDIAccess_started:
          target: GetDDIAccess
          activities:
            - set_state: started
          on_success:
            - MountDockerImageDataset_create
        DDIToCloudDockerImageJob_create:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudDockerImageJob_submit
        DDIToCloudDockerImageJob_submit:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudDockerImageJob_submitted
        DDIToCloudDockerImageJob_submitted:
          target: DDIToCloudDockerImageJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudDockerImageJob_run
        DDIToCloudDockerImageJob_run:
          target: DDIToCloudDockerImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudDockerImageJob_executed
        DDIToCloudDockerImageJob_executed:
          target: DDIToCloudDockerImageJob
          activities:
            - set_state: executed
          on_success:
            - MountDockerImageDataset_create
        MountDockerImageDataset_create:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountDockerImageDataset_created
        MountDockerImageDataset_created:
          target: MountDockerImageDataset
          activities:
            - set_state: created
          on_success:
            - MountDockerImageDataset_refresh_token
        MountDockerImageDataset_refresh_token:
          target: MountDockerImageDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountDockerImageDataset_start
            - DDIToCloudNCLScriptJob_create
        MountDockerImageDataset_start:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountDockerImageDataset_started
        MountDockerImageDataset_started:
          target: MountDockerImageDataset
          activities:
            - set_state: started
          on_success:
            - FindArchive_start
        FindArchive_start:
          target: FindArchive
          activities:
            - call_operation: Standard.start
          on_success:
            - FindArchive_started
        FindArchive_started:
          target: FindArchive
          activities:
            - set_state: started
          on_success:
            - ImageLoader_create
        ImageLoader_create:
          target: ImageLoader
          activities:
            - call_operation: Standard.create
          on_success:
            - ImageLoader_created
        ImageLoader_created:
          target: ImageLoader
          activities:
            - set_state: created
          on_success:
            - ImageLoader_start
        ImageLoader_start:
          target: ImageLoader
          activities:
            - call_operation: Standard.start
          on_success:
            - ImageLoader_started
        ImageLoader_started:
          target: ImageLoader
          activities:
            - set_state: started
          on_success:
            - WRFToMet_create
        DDIToCloudNCLScriptJob_create:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudNCLScriptJob_submit
        DDIToCloudNCLScriptJob_submit:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudNCLScriptJob_submitted
        DDIToCloudNCLScriptJob_submitted:
          target: DDIToCloudNCLScriptJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudNCLScriptJob_run
        DDIToCloudNCLScriptJob_run:
          target: DDIToCloudNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudNCLScriptJob_executed
        DDIToCloudNCLScriptJob_executed:
          target: DDIToCloudNCLScriptJob
          activities:
            - set_state: executed
          on_success:
            - MountNCLScriptDataset_create
        MountNCLScriptDataset_create:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountNCLScriptDataset_created
        MountNCLScriptDataset_created:
          target: MountNCLScriptDataset
          activities:
            - set_state: created
          on_success:
            - MountNCLScriptDataset_refresh_token
        MountNCLScriptDataset_refresh_token:
          target: MountNCLScriptDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - DDIToCloudWRFJob_create
            - MountNCLScriptDataset_start
        MountNCLScriptDataset_start:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountNCLScriptDataset_started
        MountNCLScriptDataset_started:
          target: MountNCLScriptDataset
          activities:
            - set_state: started
          on_success:
            - FindNCLScript_start
        FindNCLScript_start:
          target: FindNCLScript
          activities:
            - call_operation: Standard.start
          on_success:
            - FindNCLScript_started
        FindNCLScript_started:
          target: FindNCLScript
          activities:
            - set_state: started
          on_success:
            - MoveNCLScript_start
        MoveNCLScript_start:
          target: MoveNCLScript
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveNCLScript_started
        MoveNCLScript_started:
          target: MoveNCLScript
          activities:
            - set_state: started
          on_success:
            - WRFToMet_create
        DDIToCloudWRFJob_create:
          target: DDIToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DDIToCloudWRFJob_submit
        DDIToCloudWRFJob_submit:
          target: DDIToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DDIToCloudWRFJob_submitted
        DDIToCloudWRFJob_submitted:
          target: DDIToCloudWRFJob
          activities:
            - set_state: submitted
          on_success:
            - DDIToCloudWRFJob_run
        DDIToCloudWRFJob_run:
          target: DDIToCloudWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DDIToCloudWRFJob_executed
        DDIToCloudWRFJob_executed:
          target: DDIToCloudWRFJob
          activities:
            - set_state: executed
          on_success:
            - MountWRFDataset_create
        MountWRFDataset_create:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.create
          on_success:
            - MountWRFDataset_created
        MountWRFDataset_created:
          target: MountWRFDataset
          activities:
            - set_state: created
          on_success:
            - MountWRFDataset_refresh_token
        MountWRFDataset_refresh_token:
          target: MountWRFDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountWRFDataset_start
        MountWRFDataset_start:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.start
          on_success:
            - MountWRFDataset_started
        MountWRFDataset_started:
          target: MountWRFDataset
          activities:
            - set_state: started
          on_success:
            - FindWRFiles_start
        FindWRFiles_start:
          target: FindWRFiles
          activities:
            - call_operation: Standard.start
          on_success:
            - FindWRFiles_started
        FindWRFiles_started:
          target: FindWRFiles
          activities:
            - set_state: started
          on_success:
            - MoveWRFFiles_start
        MoveWRFFiles_start:
          target: MoveWRFFiles
          activities:
            - call_operation: Standard.start
          on_success:
            - MoveWRFFiles_started
        MoveWRFFiles_started:
          target: MoveWRFFiles
          activities:
            - set_state: started
          on_success:
            - WRFToMet_create
        WRFToMet_create:
          target: WRFToMet
          activities:
            - call_operation: Standard.create
          on_success:
            - WRFToMet_start
        WRFToMet_start:
          target: WRFToMet
          activities:
            - call_operation: Standard.start
          on_success:
            - WRFToMet_started
        WRFToMet_started:
          target: WRFToMet
          activities:
            - set_state: started
          on_success:
            - CreateStagingAreaResultDir_start
        CreateStagingAreaResultDir_start:
          target: CreateStagingAreaResultDir
          activities:
            - call_operation: Standard.start
          on_success:
            - CreateStagingAreaResultDir_started
        CreateStagingAreaResultDir_started:
          target: CreateStagingAreaResultDir
          activities:
            - set_state: started
          on_success:
            - StageMETResults_start
        StageMETResults_start:
          target: StageMETResults
          activities:
            - call_operation: Standard.start
          on_success:
            - StageMETResults_started
        StageMETResults_started:
          target: StageMETResults
          activities:
            - set_state: started
          on_success:
            - METResultsToDDIJob_create
        METResultsToDDIJob_create:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - METResultsToDDIJob_submit
        METResultsToDDIJob_submit:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - METResultsToDDIJob_submitted
        METResultsToDDIJob_submitted:
          target: METResultsToDDIJob
          activities:
            - set_state: submitted
          on_success:
            - METResultsToDDIJob_run
        METResultsToDDIJob_run:
          target: METResultsToDDIJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - METResultsToDDIJob_executed
        METResultsToDDIJob_executed:
          target: METResultsToDDIJob
          activities:
            - set_state: executed
          on_success:
            - GetPostprocessDatasetInfo_create
        GetPostprocessDatasetInfo_create:
          target: GetPostprocessDatasetInfo
          activities:
            - call_operation: Standard.create
          on_success:
            - GetPostprocessDatasetInfo_start
        GetPostprocessDatasetInfo_start:
          target: GetPostprocessDatasetInfo
          activities:
            - call_operation: Standard.start
          on_success:
            - GetPostprocessDatasetInfo_started
        GetPostprocessDatasetInfo_started:
          target: GetPostprocessDatasetInfo
          activities:
            - set_state: started
          on_success:
            - FindWindowsCloudLocationJob_submit
        FindWindowsCloudLocationJob_submit:
          target: FindWindowsCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - FindWindowsCloudLocationJob_run
        FindWindowsCloudLocationJob_run:
          target: FindWindowsCloudLocationJob
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - FindWindowsCloudLocationJob_executed
        FindWindowsCloudLocationJob_executed:
          target: FindWindowsCloudLocationJob
          activities:
            - set_state: executed
          on_success:
            - WindowsNetwork_install
        WindowsNetwork_install:
          target: PublicNetADMSWinVM
          activities:
            - delegate: install
          on_success:
            - WindowsCompute_install
        WindowsCompute_install:
          target: ADMS_WIN_VM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccessWinVM_start
        GetDDIAccessWinVM_start:
          target: GetDDIAccessWinVM
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccessWinVM_started
        GetDDIAccessWinVM_started:
          target: GetDDIAccessWinVM
          activities:
            - set_state: started
          on_success:
            - RefreshADMSRunToken_start
        RefreshADMSRunToken_start:
          target: RefreshADMSRunToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSRunToken_started
        RefreshADMSRunToken_started:
          target: RefreshADMSRunToken
          activities:
            - set_state: started
          on_success:
            - ADMSRun_start
        ADMSRun_start:
          target: ADMSRun
          activities:
            - call_operation: Standard.start
          on_success:
            - ADMSRun_started
        ADMSRun_started:
          target: ADMSRun
          activities:
            - set_state: started
          on_success:
            - RefreshADMSStoreToken_start
        RefreshADMSStoreToken_start:
          target: RefreshADMSStoreToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSStoreToken_started
        RefreshADMSStoreToken_started:
          target: RefreshADMSStoreToken
          activities:
            - set_state: started
          on_success:
            - ADMSStore_start
        ADMSStore_start:
          target: ADMSStore
          activities:
            - call_operation: Standard.start
          on_success:
            - ADMSStore_started
        ADMSStore_started:
          target: ADMSStore
          activities:
            - set_state: started
          on_success:
            - RefreshADMSWinVMToken_start
        RefreshADMSWinVMToken_start:
          target: RefreshADMSWinVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSWinVMToken_started
        RefreshADMSWinVMToken_started:
          target: RefreshADMSWinVMToken
          activities:
            - set_state: started
          on_success:
            - WindowsCompute_uninstall
        WindowsCompute_uninstall:
          target: ADMS_WIN_VM
          activities:
            - delegate: uninstall
          on_success:
            - WindowsNetwork_uninstall
        WindowsNetwork_uninstall:
          target: PublicNetADMSWinVM
          activities:
            - delegate: uninstall
          on_success:
            - MountDockerImageDataset_refresh_token_for_stop
        MountDockerImageDataset_refresh_token_for_stop:
          target: MountDockerImageDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountDockerImageDataset_stop
        MountDockerImageDataset_stop:
          target: MountDockerImageDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountDockerImageDataset_stopped
        MountDockerImageDataset_stopped:
          target: MountDockerImageDataset
          activities:
            - set_state: stopped
          on_success:
            - MountNCLScriptDataset_refresh_token_for_stop
        MountNCLScriptDataset_refresh_token_for_stop:
          target: MountNCLScriptDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountNCLScriptDataset_stop
        MountNCLScriptDataset_stop:
          target: MountNCLScriptDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountNCLScriptDataset_stopped
        MountNCLScriptDataset_stopped:
          target: MountNCLScriptDataset
          activities:
            - set_state: stopped
          on_success:
            - MountWRFDataset_refresh_token_for_stop
        MountWRFDataset_refresh_token_for_stop:
          target: MountWRFDataset
          activities:
            - call_operation: custom.refresh_token
          on_success:
            - MountWRFDataset_stop
        MountWRFDataset_stop:
          target: MountWRFDataset
          activities:
            - call_operation: Standard.stop
          on_success:
            - MountWRFDataset_stopped
        MountWRFDataset_stopped:
          target: MountWRFDataset
          activities:
            - set_state: stopped
          on_success:
            - DeleteCloudDataImageJob_create
        DeleteCloudDataImageJob_create:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataImageJob_created
        DeleteCloudDataImageJob_created:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataImageJob_submit
        DeleteCloudDataImageJob_submit:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataImageJob_submitted
        DeleteCloudDataImageJob_submitted:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataImageJob_run
        DeleteCloudDataImageJob_run:
          target: DeleteCloudDataImageJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataImageJob_executed
        DeleteCloudDataImageJob_executed:
          target: DeleteCloudDataImageJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudDataNCLScriptJob_create
        DeleteCloudDataNCLScriptJob_create:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataNCLScriptJob_created
        DeleteCloudDataNCLScriptJob_created:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataNCLScriptJob_submit
        DeleteCloudDataNCLScriptJob_submit:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataNCLScriptJob_submitted
        DeleteCloudDataNCLScriptJob_submitted:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataNCLScriptJob_run
        DeleteCloudDataNCLScriptJob_run:
          target: DeleteCloudDataNCLScriptJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataNCLScriptJob_executed
        DeleteCloudDataNCLScriptJob_executed:
          target: DeleteCloudDataNCLScriptJob
          activities:
            - set_state: executed
          on_success:
            - DeleteCloudDataWRFJob_create
        DeleteCloudDataWRFJob_create:
          target: DeleteCloudDataWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Standard.create
          on_success:
            - DeleteCloudDataWRFJob_created
        DeleteCloudDataWRFJob_created:
          target: DeleteCloudDataWRFJob
          activities:
            - set_state: created
          on_success:
            - DeleteCloudDataWRFJob_submit
        DeleteCloudDataWRFJob_submit:
          target: DeleteCloudDataWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DeleteCloudDataWRFJob_submitted
        DeleteCloudDataWRFJob_submitted:
          target: DeleteCloudDataWRFJob
          activities:
            - set_state: submitted
          on_success:
            - DeleteCloudDataWRFJob_run
        DeleteCloudDataWRFJob_run:
          target: DeleteCloudDataWRFJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DeleteCloudDataWRFJob_executed
        DeleteCloudDataWRFJob_executed:
          target: DeleteCloudDataWRFJob
          activities:
            - set_state: executed
          on_success:
            - RefreshADMSVMToken_start
        RefreshADMSVMToken_start:
          target: RefreshADMSVMToken
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshADMSVMToken_started
        RefreshADMSVMToken_started:
          target: RefreshADMSVMToken
          activities:
            - set_state: started
          on_success:
            - Compute_uninstall
        Compute_uninstall:
          target: ADMS_VM
          activities:
            - delegate: uninstall
          on_success:
            - Network_uninstall
        Network_uninstall:
          target: PublicNetADMSVM
          activities:
            - delegate: uninstall
