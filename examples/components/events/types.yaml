tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.common.examples.events
  template_version: 0.1.0
  template_author: lexis
  
imports:
  - tosca-normative-types:1.0.0-ALIEN20 
  - org.lexis.common.noscheduler.job:0.1.0
  - yorc-types:1.1.0
  - org.lexis.common.heappe-types:1.0.8

node_types:
  org.lexis.common.examples.events.WaitForEventJob:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Waits for a file at a given URL to be non empty
      and returns a list of tasks parameters to be used by a HEAppE job.
    properties:
      file_url:
        description: URL of the file 
        type: string
        required: true
      stdout_file_path:
        description: path to file where to log stdout
        type: string
        default: /tmp/wait_for_event_stdout
        required: false
      stderr_file_path:
        description: path to file where to logg stderr
        type: string
        default: /tmp/wait_for_event_stderr
        required: false
    attributes:
      event: { get_operation_output: [SELF, tosca.interfaces.node.lifecycle.Runnable, run, EVENT] }
      # tasks_parameters provides a list of tasks parameters that will be used by
      # a HEAppE job in relationship with this component
      # The HEAppE job in relationship with this component expects this
      # tasks_parameters value to be a base64-encoded value of a json parameter
      # providing in a map of task names, the list of HEAppE parameters with their value for this task
      # Example of such json value:
      # {"FirstTask": [{"CommandParameterIdentifier": "param1", "ParameterValue": "value1"}]}
      # (must be base64-encoded)
      tasks_parameters: { get_operation_output: [SELF, tosca.interfaces.node.lifecycle.Runnable, run, TASKS_PARAMETERS] }
    capabilities:
      tasks_parameters_provider:
        type: org.lexis.common.heappe.capabilities.TasksParametersProvider
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        submit:
          inputs:
            FILE_URL: {get_property: [SELF, file_url] }
            STDOUT_FILE: {get_property: [SELF, stdout_file_path] }
            STDERR_FILE: {get_property: [SELF, stderr_file_path] }
          implementation: playbooks/submit_wait_for_event.yaml
        run:
          inputs:
            STDOUT_FILE: {get_property: [SELF, stdout_file_path] }
            STDERR_FILE: {get_property: [SELF, stderr_file_path] }
          implementation: playbooks/check_event_received.yaml
        cancel:
          implementation: playbooks/cancel_wait_for_event.yaml
    artifacts:
      - script_to_execute:
          type: tosca.artifacts.File
          file: scripts/wait_and_get_file_content.sh
  org.lexis.common.examples.events.WaitForEventJobWithTimeout:
    derived_from: org.lexis.common.noscheduler.Job
    description: >
      Waits for a file at a given URL to be non empty
      and returns its content in the attribute stdout declared in parent type org.lexis.common.noscheduler.Job
    properties:
      file_url:
        description: URL of the file 
        type: string
        required: true
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        # This component child of org.lexis.common.noscheduler.Job must implement a 
        # submit operation that needs to provide these values:
        # - TOSCA_JOB_ID, providing the PID of the command launched
        # - SUBMIT_DATE_EPOCH, providing the epoch time of the submission
        submit:
          inputs:
            FILE_URL: {get_property: [SELF, file_url] }
            STDOUT_FILE: {get_property: [SELF, stdout_file_path] }
            STDERR_FILE: {get_property: [SELF, stderr_file_path] }
          implementation: scripts/submit_job.sh
    artifacts:
      - script_to_execute:
          type: tosca.artifacts.File
          file: scripts/wait_and_get_file_content.sh
capability_types:
  org.lexis.common.examples.events.capabilities.EventProvider:
    derived_from: tosca.capabilities.Root
    description: >
      A capability fulfilling requirements of a node requiring to be
      associated with an event provider
    attributes:
      event:
        type: string
        description: event
